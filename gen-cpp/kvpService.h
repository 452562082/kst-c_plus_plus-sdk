/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef kvpService_H
#define kvpService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "asv_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class kvpServiceIf {
 public:
  virtual ~kvpServiceIf() {}
  virtual void kvpPing(std::string& _return) = 0;

  /**
   * 解析语音文件信息。
   * 
   * @param [in] wavpath 语音文件路径。
   * 
   * @return Rpc_UttInfo 返回语音信息。
   * 
   * @param wavpath
   */
  virtual void kvpGetUttInfo(Rpc_UttInfo& _return, const std::string& wavpath) = 0;

  /**
   * 将某说话人ID从某个库节点中删除。
   * 
   * @param [in] vp_node 库节点名称。
   * @param [in] vp_dir 库节点本地路径。
   * @param [in] spk_id 说话人ID。
   * 
   * @return KVP_CODE
   * 
   * @param vp_node
   * @param vp_dir
   * @param spk_id
   */
  virtual int32_t kvpModelRemoveBySpkid(const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id) = 0;

  /**
   * 注册说话人。
   * 
   * @param [in] utt 语音路径。
   * @param [in] vp_node 说话人待注册库节点名称。
   * @param [in] vp_dir 声纹库路径。(--------该参数被废弃--------)
   * @param [in] spk_id 说话人ID。
   * @param [in] sp_chan 指定处理声道。
   * 
   * @return Rpc_ModelInfo 说话人模型信息。
   * 
   * @param utt
   * @param vp_node
   * @param vp_dir
   * @param spk_id
   * @param sp_chan
   */
  virtual void kvpRegisterSpeakerByFile(Rpc_ModelInfo& _return, const std::string& utt, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id, const int32_t sp_chan) = 0;

  /**
   * 1:1验证。
   * 
   * @param [in] utt 语音路径。
   * @param [in] spk_id 说话人ID。
   * @param [in] vp_node 说话人所在库节点名称。
   * @param [in] utt_type 语音场景类型。
   * @param [in] sp_chan 指定处理声道。
   * 
   * @return Rpc_ScoreInfo 1:1验证信息。
   * 
   * @param utt
   * @param spk_id
   * @param vp_node
   * @param utt_type
   * @param sp_chan
   */
  virtual void kvpVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type, const int32_t sp_chan) = 0;

  /**
   * 1:1验证(给定2段语音进行比较)。
   * 
   * @param [in] utt1 第1段语音路径。
   * @oaram [in] sp_chan1 指定第1段语音声道。
   * @param [in] utt_type1 指定第1段语音场景类型。
   * @param [in] utt2  第2段语音路径。
   * @oaram [in] sp_chan2 指定第2段语音声道。
   * @param [in] utt_type2 指定第2段语音场景类型。
   * 
   * @return Rpc_ScoreInfo 验证得分信息
   * 
   * @param utt1
   * @param sp_chan1
   * @param utt_type1
   * @param utt2
   * @param sp_chan2
   * @param utt_type2
   */
  virtual void kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt1, const int32_t sp_chan1, const int32_t utt_type1, const std::string& utt2, const int32_t sp_chan2, const int32_t utt_type2) = 0;

  /**
   * 说话人辨认。
   * 
   * @param [in] utt 语音文件路径。
   * @param [in] node_list 库节点列表。
   *  @param [in] node_num 库节点数目。
   * @param [in] top_n Top n数目。
   * @param [in] utt_type 语音场景类型。
   * @param [in] sp_chan 指定处理声道，0：左声道，1：右声道。
   * 
   * @return Rpc_TopSpeakerInfo Top n得分信息
   * 
   * @param utt
   * @param vp_node_arr
   * @param node_num
   * @param top_n
   * @param utt_type
   * @param sp_chan
   */
  virtual void kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& _return, const std::string& utt, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type, const int32_t sp_chan) = 0;

  /**
   * 将说话人模型以文件的形式加载到内存某库节点中。
   * 
   * @param [in] vp_node 库节点名称。
   * @param [in] iv_file 说话人模型文件路径。
   * 
   * @return KVP_CODE
   * 
   * 
   * @param vp_node
   * @param iv_file
   */
  virtual int32_t kvpIvectorLoadByFile(const std::string& vp_node, const std::string& iv_file) = 0;

  /**
   * 向总库中插入某个库节点。
   * 
   * @param vp_node 库节点名称。
   * 
   * @return KVP_CODE
   * 
   * @param vp_node
   */
  virtual int32_t kvpInsertNode(const std::string& vp_node) = 0;

  /**
   * 从总库中删除某个库节点。
   * 
   * @param vp_node 库节点名称。
   * 
   * @return KVP_CODE
   * 
   * @param vp_node
   */
  virtual int32_t kvpDeleteNode(const std::string& vp_node) = 0;

  /**
   * 将说话人模型从一个库移到另一个库。
   * 
   * @param spk_id 说话人ID。
   * @param origin 原始库。
   * @param target 目标库。
   * 
   * @return KVP_CODE
   * 
   * @param spk_id
   * @param origin
   * @param target
   */
  virtual int32_t kvpMoveNode(const std::string& spk_id, const std::string& origin, const std::string& target) = 0;

  /**
   * 获取机器指纹。
   * 
   * @return 机器人指纹字符串。
   */
  virtual void kvpGetFingerprint(std::string& _return) = 0;

  /**
   * 获取授权信息。
   * 
   * @return Rpc_LicenceInfo 授权信息。
   */
  virtual void KvpGetLicenceInfo(Rpc_LicenceInfo& _return) = 0;

  /**
   * 如果已经初始化成功，则直接返回KVP_CODE_SUCCEED，否则进行初始化。
   * 
   *  @param licence 授权字符串。
   *  
   *  @return KVP_CODE
   * 
   * @param licence
   */
  virtual int32_t kvpSetLicence(const std::string& licence) = 0;

  /**
   * 判断Licence是否有效。
   * 
   * 	@return 授权标志。
   */
  virtual bool kvpIsLicenceValid() = 0;

  /**
   * 注册说话人（二进制流格式）。
   * 
   * @param [in] utt 语音路径。
   * @param [in] samp_rate 语音数据采样率。
   * @param [in] vp_node 说话人待注册库节点名称。
   * @param [in] vp_dir 声纹库路径。(--------该参数被废弃--------)
   * @param [in] spk_id 说话人ID。
   * 
   * @return Rpc_ModelInfo 说话人模型信息。
   * 
   * @param utt
   * @param samp_rate
   * @param vp_node
   * @param vp_dir
   * @param spk_id
   */
  virtual void kvpRegisterSpeakerByStream(Rpc_ModelInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id) = 0;

  /**
   * 说话人辨认（二进制流格式）。
   * 
   * @param [in] utt 语音流。
   * @param [in] samp_rate 语音数据采样率。
   * @param [in] node_list 库节点列表。
   *  @param [in] node_num 库节点数目。
   * @param [in] top_n Top n数目。
   * @param [in] utt_type 语音场景类型。
   * 
   * @return Rpc_TopSpeakerInfo Top n得分信息
   * 
   * @param utt
   * @param samp_rate
   * @param vp_node_arr
   * @param node_num
   * @param top_n
   * @param utt_type
   */
  virtual void kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type) = 0;

  /**
   * 说话人确认（二进制流格式）。
   * 
   * @param [in] utt 语音流。
   * @param [in] samp_rate 语音数据采样率。
   *  @param [in] spk_id 说话人ID。
   * @param [in] vp_node 库节点。
   * @param [in] utt_type 语音场景类型。
   * 
   * @return Rpc_ScoreInfo 得分信息
   * 
   * @param utt
   * @param samp_rate
   * @param spk_id
   * @param vp_node
   * @param utt_type
   */
  virtual void kvpVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type) = 0;

  /**
   * 1:1验证(给定2段语音流进行比较)。
   * 
   * @param [in] utt1 第1段语音流。
   * @param [in] utt1 samp_rate_1 语音数据采样率。
   * @param [in] utt_type1 指定第1段语音场景类型。
   * @param [in] utt2  第2段语音流。
   * @param [in] utt2 samp_rate_2 语音数据采样率。
   * @param [in] utt_type2 指定第2段语音场景类型。
   * 
   * @return Rpc_ScoreInfo 验证得分信息
   * 
   * @param utt1
   * @param samp_rate_1
   * @param utt_type1
   * @param utt2
   * @param samp_rate_2
   * @param utt_type2
   */
  virtual void kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt1, const int32_t samp_rate_1, const int32_t utt_type1, const std::vector<int16_t> & utt2, const int32_t samp_rate_2, const int32_t utt_type2) = 0;

  /**
   * 获取某节点说话人ID列表。
   * 
   * @param [in] vp_node 节点名称。
   * 
   * @return 说话人ID列表
   * 
   * @param vp_node
   */
  virtual void kvpNodeGetList(std::vector<std::string> & _return, const std::string& vp_node) = 0;
};

class kvpServiceIfFactory {
 public:
  typedef kvpServiceIf Handler;

  virtual ~kvpServiceIfFactory() {}

  virtual kvpServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(kvpServiceIf* /* handler */) = 0;
};

class kvpServiceIfSingletonFactory : virtual public kvpServiceIfFactory {
 public:
  kvpServiceIfSingletonFactory(const boost::shared_ptr<kvpServiceIf>& iface) : iface_(iface) {}
  virtual ~kvpServiceIfSingletonFactory() {}

  virtual kvpServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(kvpServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<kvpServiceIf> iface_;
};

class kvpServiceNull : virtual public kvpServiceIf {
 public:
  virtual ~kvpServiceNull() {}
  void kvpPing(std::string& /* _return */) {
    return;
  }
  void kvpGetUttInfo(Rpc_UttInfo& /* _return */, const std::string& /* wavpath */) {
    return;
  }
  int32_t kvpModelRemoveBySpkid(const std::string& /* vp_node */, const std::string& /* vp_dir */, const std::string& /* spk_id */) {
    int32_t _return = 0;
    return _return;
  }
  void kvpRegisterSpeakerByFile(Rpc_ModelInfo& /* _return */, const std::string& /* utt */, const std::string& /* vp_node */, const std::string& /* vp_dir */, const std::string& /* spk_id */, const int32_t /* sp_chan */) {
    return;
  }
  void kvpVerifySpeakerByFile(Rpc_ScoreInfo& /* _return */, const std::string& /* utt */, const std::string& /* spk_id */, const std::string& /* vp_node */, const int32_t /* utt_type */, const int32_t /* sp_chan */) {
    return;
  }
  void kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& /* _return */, const std::string& /* utt1 */, const int32_t /* sp_chan1 */, const int32_t /* utt_type1 */, const std::string& /* utt2 */, const int32_t /* sp_chan2 */, const int32_t /* utt_type2 */) {
    return;
  }
  void kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& /* _return */, const std::string& /* utt */, const std::vector<std::string> & /* vp_node_arr */, const int32_t /* node_num */, const int32_t /* top_n */, const int32_t /* utt_type */, const int32_t /* sp_chan */) {
    return;
  }
  int32_t kvpIvectorLoadByFile(const std::string& /* vp_node */, const std::string& /* iv_file */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t kvpInsertNode(const std::string& /* vp_node */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t kvpDeleteNode(const std::string& /* vp_node */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t kvpMoveNode(const std::string& /* spk_id */, const std::string& /* origin */, const std::string& /* target */) {
    int32_t _return = 0;
    return _return;
  }
  void kvpGetFingerprint(std::string& /* _return */) {
    return;
  }
  void KvpGetLicenceInfo(Rpc_LicenceInfo& /* _return */) {
    return;
  }
  int32_t kvpSetLicence(const std::string& /* licence */) {
    int32_t _return = 0;
    return _return;
  }
  bool kvpIsLicenceValid() {
    bool _return = false;
    return _return;
  }
  void kvpRegisterSpeakerByStream(Rpc_ModelInfo& /* _return */, const std::vector<int16_t> & /* utt */, const int32_t /* samp_rate */, const std::string& /* vp_node */, const std::string& /* vp_dir */, const std::string& /* spk_id */) {
    return;
  }
  void kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& /* _return */, const std::vector<int16_t> & /* utt */, const int32_t /* samp_rate */, const std::vector<std::string> & /* vp_node_arr */, const int32_t /* node_num */, const int32_t /* top_n */, const int32_t /* utt_type */) {
    return;
  }
  void kvpVerifySpeakerByStream(Rpc_ScoreInfo& /* _return */, const std::vector<int16_t> & /* utt */, const int32_t /* samp_rate */, const std::string& /* spk_id */, const std::string& /* vp_node */, const int32_t /* utt_type */) {
    return;
  }
  void kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& /* _return */, const std::vector<int16_t> & /* utt1 */, const int32_t /* samp_rate_1 */, const int32_t /* utt_type1 */, const std::vector<int16_t> & /* utt2 */, const int32_t /* samp_rate_2 */, const int32_t /* utt_type2 */) {
    return;
  }
  void kvpNodeGetList(std::vector<std::string> & /* _return */, const std::string& /* vp_node */) {
    return;
  }
};


class kvpService_kvpPing_args {
 public:

  kvpService_kvpPing_args(const kvpService_kvpPing_args&);
  kvpService_kvpPing_args& operator=(const kvpService_kvpPing_args&);
  kvpService_kvpPing_args() {
  }

  virtual ~kvpService_kvpPing_args() throw();

  bool operator == (const kvpService_kvpPing_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kvpService_kvpPing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpPing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpPing_pargs {
 public:


  virtual ~kvpService_kvpPing_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpPing_result__isset {
  _kvpService_kvpPing_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpPing_result__isset;

class kvpService_kvpPing_result {
 public:

  kvpService_kvpPing_result(const kvpService_kvpPing_result&);
  kvpService_kvpPing_result& operator=(const kvpService_kvpPing_result&);
  kvpService_kvpPing_result() : success() {
  }

  virtual ~kvpService_kvpPing_result() throw();
  std::string success;

  _kvpService_kvpPing_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const kvpService_kvpPing_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpPing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpPing_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpPing_presult__isset {
  _kvpService_kvpPing_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpPing_presult__isset;

class kvpService_kvpPing_presult {
 public:


  virtual ~kvpService_kvpPing_presult() throw();
  std::string* success;

  _kvpService_kvpPing_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpGetUttInfo_args__isset {
  _kvpService_kvpGetUttInfo_args__isset() : wavpath(false) {}
  bool wavpath :1;
} _kvpService_kvpGetUttInfo_args__isset;

class kvpService_kvpGetUttInfo_args {
 public:

  kvpService_kvpGetUttInfo_args(const kvpService_kvpGetUttInfo_args&);
  kvpService_kvpGetUttInfo_args& operator=(const kvpService_kvpGetUttInfo_args&);
  kvpService_kvpGetUttInfo_args() : wavpath() {
  }

  virtual ~kvpService_kvpGetUttInfo_args() throw();
  std::string wavpath;

  _kvpService_kvpGetUttInfo_args__isset __isset;

  void __set_wavpath(const std::string& val);

  bool operator == (const kvpService_kvpGetUttInfo_args & rhs) const
  {
    if (!(wavpath == rhs.wavpath))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpGetUttInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpGetUttInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpGetUttInfo_pargs {
 public:


  virtual ~kvpService_kvpGetUttInfo_pargs() throw();
  const std::string* wavpath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpGetUttInfo_result__isset {
  _kvpService_kvpGetUttInfo_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpGetUttInfo_result__isset;

class kvpService_kvpGetUttInfo_result {
 public:

  kvpService_kvpGetUttInfo_result(const kvpService_kvpGetUttInfo_result&);
  kvpService_kvpGetUttInfo_result& operator=(const kvpService_kvpGetUttInfo_result&);
  kvpService_kvpGetUttInfo_result() {
  }

  virtual ~kvpService_kvpGetUttInfo_result() throw();
  Rpc_UttInfo success;

  _kvpService_kvpGetUttInfo_result__isset __isset;

  void __set_success(const Rpc_UttInfo& val);

  bool operator == (const kvpService_kvpGetUttInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpGetUttInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpGetUttInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpGetUttInfo_presult__isset {
  _kvpService_kvpGetUttInfo_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpGetUttInfo_presult__isset;

class kvpService_kvpGetUttInfo_presult {
 public:


  virtual ~kvpService_kvpGetUttInfo_presult() throw();
  Rpc_UttInfo* success;

  _kvpService_kvpGetUttInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpModelRemoveBySpkid_args__isset {
  _kvpService_kvpModelRemoveBySpkid_args__isset() : vp_node(false), vp_dir(false), spk_id(false) {}
  bool vp_node :1;
  bool vp_dir :1;
  bool spk_id :1;
} _kvpService_kvpModelRemoveBySpkid_args__isset;

class kvpService_kvpModelRemoveBySpkid_args {
 public:

  kvpService_kvpModelRemoveBySpkid_args(const kvpService_kvpModelRemoveBySpkid_args&);
  kvpService_kvpModelRemoveBySpkid_args& operator=(const kvpService_kvpModelRemoveBySpkid_args&);
  kvpService_kvpModelRemoveBySpkid_args() : vp_node(), vp_dir(), spk_id() {
  }

  virtual ~kvpService_kvpModelRemoveBySpkid_args() throw();
  std::string vp_node;
  std::string vp_dir;
  std::string spk_id;

  _kvpService_kvpModelRemoveBySpkid_args__isset __isset;

  void __set_vp_node(const std::string& val);

  void __set_vp_dir(const std::string& val);

  void __set_spk_id(const std::string& val);

  bool operator == (const kvpService_kvpModelRemoveBySpkid_args & rhs) const
  {
    if (!(vp_node == rhs.vp_node))
      return false;
    if (!(vp_dir == rhs.vp_dir))
      return false;
    if (!(spk_id == rhs.spk_id))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpModelRemoveBySpkid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpModelRemoveBySpkid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpModelRemoveBySpkid_pargs {
 public:


  virtual ~kvpService_kvpModelRemoveBySpkid_pargs() throw();
  const std::string* vp_node;
  const std::string* vp_dir;
  const std::string* spk_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpModelRemoveBySpkid_result__isset {
  _kvpService_kvpModelRemoveBySpkid_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpModelRemoveBySpkid_result__isset;

class kvpService_kvpModelRemoveBySpkid_result {
 public:

  kvpService_kvpModelRemoveBySpkid_result(const kvpService_kvpModelRemoveBySpkid_result&);
  kvpService_kvpModelRemoveBySpkid_result& operator=(const kvpService_kvpModelRemoveBySpkid_result&);
  kvpService_kvpModelRemoveBySpkid_result() : success(0) {
  }

  virtual ~kvpService_kvpModelRemoveBySpkid_result() throw();
  int32_t success;

  _kvpService_kvpModelRemoveBySpkid_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const kvpService_kvpModelRemoveBySpkid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpModelRemoveBySpkid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpModelRemoveBySpkid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpModelRemoveBySpkid_presult__isset {
  _kvpService_kvpModelRemoveBySpkid_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpModelRemoveBySpkid_presult__isset;

class kvpService_kvpModelRemoveBySpkid_presult {
 public:


  virtual ~kvpService_kvpModelRemoveBySpkid_presult() throw();
  int32_t* success;

  _kvpService_kvpModelRemoveBySpkid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpRegisterSpeakerByFile_args__isset {
  _kvpService_kvpRegisterSpeakerByFile_args__isset() : utt(false), vp_node(false), vp_dir(false), spk_id(false), sp_chan(false) {}
  bool utt :1;
  bool vp_node :1;
  bool vp_dir :1;
  bool spk_id :1;
  bool sp_chan :1;
} _kvpService_kvpRegisterSpeakerByFile_args__isset;

class kvpService_kvpRegisterSpeakerByFile_args {
 public:

  kvpService_kvpRegisterSpeakerByFile_args(const kvpService_kvpRegisterSpeakerByFile_args&);
  kvpService_kvpRegisterSpeakerByFile_args& operator=(const kvpService_kvpRegisterSpeakerByFile_args&);
  kvpService_kvpRegisterSpeakerByFile_args() : utt(), vp_node(), vp_dir(), spk_id(), sp_chan(0) {
  }

  virtual ~kvpService_kvpRegisterSpeakerByFile_args() throw();
  std::string utt;
  std::string vp_node;
  std::string vp_dir;
  std::string spk_id;
  int32_t sp_chan;

  _kvpService_kvpRegisterSpeakerByFile_args__isset __isset;

  void __set_utt(const std::string& val);

  void __set_vp_node(const std::string& val);

  void __set_vp_dir(const std::string& val);

  void __set_spk_id(const std::string& val);

  void __set_sp_chan(const int32_t val);

  bool operator == (const kvpService_kvpRegisterSpeakerByFile_args & rhs) const
  {
    if (!(utt == rhs.utt))
      return false;
    if (!(vp_node == rhs.vp_node))
      return false;
    if (!(vp_dir == rhs.vp_dir))
      return false;
    if (!(spk_id == rhs.spk_id))
      return false;
    if (!(sp_chan == rhs.sp_chan))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpRegisterSpeakerByFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpRegisterSpeakerByFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpRegisterSpeakerByFile_pargs {
 public:


  virtual ~kvpService_kvpRegisterSpeakerByFile_pargs() throw();
  const std::string* utt;
  const std::string* vp_node;
  const std::string* vp_dir;
  const std::string* spk_id;
  const int32_t* sp_chan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpRegisterSpeakerByFile_result__isset {
  _kvpService_kvpRegisterSpeakerByFile_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpRegisterSpeakerByFile_result__isset;

class kvpService_kvpRegisterSpeakerByFile_result {
 public:

  kvpService_kvpRegisterSpeakerByFile_result(const kvpService_kvpRegisterSpeakerByFile_result&);
  kvpService_kvpRegisterSpeakerByFile_result& operator=(const kvpService_kvpRegisterSpeakerByFile_result&);
  kvpService_kvpRegisterSpeakerByFile_result() {
  }

  virtual ~kvpService_kvpRegisterSpeakerByFile_result() throw();
  Rpc_ModelInfo success;

  _kvpService_kvpRegisterSpeakerByFile_result__isset __isset;

  void __set_success(const Rpc_ModelInfo& val);

  bool operator == (const kvpService_kvpRegisterSpeakerByFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpRegisterSpeakerByFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpRegisterSpeakerByFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpRegisterSpeakerByFile_presult__isset {
  _kvpService_kvpRegisterSpeakerByFile_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpRegisterSpeakerByFile_presult__isset;

class kvpService_kvpRegisterSpeakerByFile_presult {
 public:


  virtual ~kvpService_kvpRegisterSpeakerByFile_presult() throw();
  Rpc_ModelInfo* success;

  _kvpService_kvpRegisterSpeakerByFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpVerifySpeakerByFile_args__isset {
  _kvpService_kvpVerifySpeakerByFile_args__isset() : utt(false), spk_id(false), vp_node(false), utt_type(false), sp_chan(false) {}
  bool utt :1;
  bool spk_id :1;
  bool vp_node :1;
  bool utt_type :1;
  bool sp_chan :1;
} _kvpService_kvpVerifySpeakerByFile_args__isset;

class kvpService_kvpVerifySpeakerByFile_args {
 public:

  kvpService_kvpVerifySpeakerByFile_args(const kvpService_kvpVerifySpeakerByFile_args&);
  kvpService_kvpVerifySpeakerByFile_args& operator=(const kvpService_kvpVerifySpeakerByFile_args&);
  kvpService_kvpVerifySpeakerByFile_args() : utt(), spk_id(), vp_node(), utt_type(0), sp_chan(0) {
  }

  virtual ~kvpService_kvpVerifySpeakerByFile_args() throw();
  std::string utt;
  std::string spk_id;
  std::string vp_node;
  int32_t utt_type;
  int32_t sp_chan;

  _kvpService_kvpVerifySpeakerByFile_args__isset __isset;

  void __set_utt(const std::string& val);

  void __set_spk_id(const std::string& val);

  void __set_vp_node(const std::string& val);

  void __set_utt_type(const int32_t val);

  void __set_sp_chan(const int32_t val);

  bool operator == (const kvpService_kvpVerifySpeakerByFile_args & rhs) const
  {
    if (!(utt == rhs.utt))
      return false;
    if (!(spk_id == rhs.spk_id))
      return false;
    if (!(vp_node == rhs.vp_node))
      return false;
    if (!(utt_type == rhs.utt_type))
      return false;
    if (!(sp_chan == rhs.sp_chan))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpVerifySpeakerByFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpVerifySpeakerByFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpVerifySpeakerByFile_pargs {
 public:


  virtual ~kvpService_kvpVerifySpeakerByFile_pargs() throw();
  const std::string* utt;
  const std::string* spk_id;
  const std::string* vp_node;
  const int32_t* utt_type;
  const int32_t* sp_chan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpVerifySpeakerByFile_result__isset {
  _kvpService_kvpVerifySpeakerByFile_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpVerifySpeakerByFile_result__isset;

class kvpService_kvpVerifySpeakerByFile_result {
 public:

  kvpService_kvpVerifySpeakerByFile_result(const kvpService_kvpVerifySpeakerByFile_result&);
  kvpService_kvpVerifySpeakerByFile_result& operator=(const kvpService_kvpVerifySpeakerByFile_result&);
  kvpService_kvpVerifySpeakerByFile_result() {
  }

  virtual ~kvpService_kvpVerifySpeakerByFile_result() throw();
  Rpc_ScoreInfo success;

  _kvpService_kvpVerifySpeakerByFile_result__isset __isset;

  void __set_success(const Rpc_ScoreInfo& val);

  bool operator == (const kvpService_kvpVerifySpeakerByFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpVerifySpeakerByFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpVerifySpeakerByFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpVerifySpeakerByFile_presult__isset {
  _kvpService_kvpVerifySpeakerByFile_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpVerifySpeakerByFile_presult__isset;

class kvpService_kvpVerifySpeakerByFile_presult {
 public:


  virtual ~kvpService_kvpVerifySpeakerByFile_presult() throw();
  Rpc_ScoreInfo* success;

  _kvpService_kvpVerifySpeakerByFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpTempVerifySpeakerByFile_args__isset {
  _kvpService_kvpTempVerifySpeakerByFile_args__isset() : utt1(false), sp_chan1(false), utt_type1(false), utt2(false), sp_chan2(false), utt_type2(false) {}
  bool utt1 :1;
  bool sp_chan1 :1;
  bool utt_type1 :1;
  bool utt2 :1;
  bool sp_chan2 :1;
  bool utt_type2 :1;
} _kvpService_kvpTempVerifySpeakerByFile_args__isset;

class kvpService_kvpTempVerifySpeakerByFile_args {
 public:

  kvpService_kvpTempVerifySpeakerByFile_args(const kvpService_kvpTempVerifySpeakerByFile_args&);
  kvpService_kvpTempVerifySpeakerByFile_args& operator=(const kvpService_kvpTempVerifySpeakerByFile_args&);
  kvpService_kvpTempVerifySpeakerByFile_args() : utt1(), sp_chan1(0), utt_type1(0), utt2(), sp_chan2(0), utt_type2(0) {
  }

  virtual ~kvpService_kvpTempVerifySpeakerByFile_args() throw();
  std::string utt1;
  int32_t sp_chan1;
  int32_t utt_type1;
  std::string utt2;
  int32_t sp_chan2;
  int32_t utt_type2;

  _kvpService_kvpTempVerifySpeakerByFile_args__isset __isset;

  void __set_utt1(const std::string& val);

  void __set_sp_chan1(const int32_t val);

  void __set_utt_type1(const int32_t val);

  void __set_utt2(const std::string& val);

  void __set_sp_chan2(const int32_t val);

  void __set_utt_type2(const int32_t val);

  bool operator == (const kvpService_kvpTempVerifySpeakerByFile_args & rhs) const
  {
    if (!(utt1 == rhs.utt1))
      return false;
    if (!(sp_chan1 == rhs.sp_chan1))
      return false;
    if (!(utt_type1 == rhs.utt_type1))
      return false;
    if (!(utt2 == rhs.utt2))
      return false;
    if (!(sp_chan2 == rhs.sp_chan2))
      return false;
    if (!(utt_type2 == rhs.utt_type2))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpTempVerifySpeakerByFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpTempVerifySpeakerByFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpTempVerifySpeakerByFile_pargs {
 public:


  virtual ~kvpService_kvpTempVerifySpeakerByFile_pargs() throw();
  const std::string* utt1;
  const int32_t* sp_chan1;
  const int32_t* utt_type1;
  const std::string* utt2;
  const int32_t* sp_chan2;
  const int32_t* utt_type2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpTempVerifySpeakerByFile_result__isset {
  _kvpService_kvpTempVerifySpeakerByFile_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpTempVerifySpeakerByFile_result__isset;

class kvpService_kvpTempVerifySpeakerByFile_result {
 public:

  kvpService_kvpTempVerifySpeakerByFile_result(const kvpService_kvpTempVerifySpeakerByFile_result&);
  kvpService_kvpTempVerifySpeakerByFile_result& operator=(const kvpService_kvpTempVerifySpeakerByFile_result&);
  kvpService_kvpTempVerifySpeakerByFile_result() {
  }

  virtual ~kvpService_kvpTempVerifySpeakerByFile_result() throw();
  Rpc_ScoreInfo success;

  _kvpService_kvpTempVerifySpeakerByFile_result__isset __isset;

  void __set_success(const Rpc_ScoreInfo& val);

  bool operator == (const kvpService_kvpTempVerifySpeakerByFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpTempVerifySpeakerByFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpTempVerifySpeakerByFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpTempVerifySpeakerByFile_presult__isset {
  _kvpService_kvpTempVerifySpeakerByFile_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpTempVerifySpeakerByFile_presult__isset;

class kvpService_kvpTempVerifySpeakerByFile_presult {
 public:


  virtual ~kvpService_kvpTempVerifySpeakerByFile_presult() throw();
  Rpc_ScoreInfo* success;

  _kvpService_kvpTempVerifySpeakerByFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpIdentifyTopSpeakerByFile_args__isset {
  _kvpService_kvpIdentifyTopSpeakerByFile_args__isset() : utt(false), vp_node_arr(false), node_num(false), top_n(false), utt_type(false), sp_chan(false) {}
  bool utt :1;
  bool vp_node_arr :1;
  bool node_num :1;
  bool top_n :1;
  bool utt_type :1;
  bool sp_chan :1;
} _kvpService_kvpIdentifyTopSpeakerByFile_args__isset;

class kvpService_kvpIdentifyTopSpeakerByFile_args {
 public:

  kvpService_kvpIdentifyTopSpeakerByFile_args(const kvpService_kvpIdentifyTopSpeakerByFile_args&);
  kvpService_kvpIdentifyTopSpeakerByFile_args& operator=(const kvpService_kvpIdentifyTopSpeakerByFile_args&);
  kvpService_kvpIdentifyTopSpeakerByFile_args() : utt(), node_num(0), top_n(0), utt_type(0), sp_chan(0) {
  }

  virtual ~kvpService_kvpIdentifyTopSpeakerByFile_args() throw();
  std::string utt;
  std::vector<std::string>  vp_node_arr;
  int32_t node_num;
  int32_t top_n;
  int32_t utt_type;
  int32_t sp_chan;

  _kvpService_kvpIdentifyTopSpeakerByFile_args__isset __isset;

  void __set_utt(const std::string& val);

  void __set_vp_node_arr(const std::vector<std::string> & val);

  void __set_node_num(const int32_t val);

  void __set_top_n(const int32_t val);

  void __set_utt_type(const int32_t val);

  void __set_sp_chan(const int32_t val);

  bool operator == (const kvpService_kvpIdentifyTopSpeakerByFile_args & rhs) const
  {
    if (!(utt == rhs.utt))
      return false;
    if (!(vp_node_arr == rhs.vp_node_arr))
      return false;
    if (!(node_num == rhs.node_num))
      return false;
    if (!(top_n == rhs.top_n))
      return false;
    if (!(utt_type == rhs.utt_type))
      return false;
    if (!(sp_chan == rhs.sp_chan))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIdentifyTopSpeakerByFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIdentifyTopSpeakerByFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpIdentifyTopSpeakerByFile_pargs {
 public:


  virtual ~kvpService_kvpIdentifyTopSpeakerByFile_pargs() throw();
  const std::string* utt;
  const std::vector<std::string> * vp_node_arr;
  const int32_t* node_num;
  const int32_t* top_n;
  const int32_t* utt_type;
  const int32_t* sp_chan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIdentifyTopSpeakerByFile_result__isset {
  _kvpService_kvpIdentifyTopSpeakerByFile_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIdentifyTopSpeakerByFile_result__isset;

class kvpService_kvpIdentifyTopSpeakerByFile_result {
 public:

  kvpService_kvpIdentifyTopSpeakerByFile_result(const kvpService_kvpIdentifyTopSpeakerByFile_result&);
  kvpService_kvpIdentifyTopSpeakerByFile_result& operator=(const kvpService_kvpIdentifyTopSpeakerByFile_result&);
  kvpService_kvpIdentifyTopSpeakerByFile_result() {
  }

  virtual ~kvpService_kvpIdentifyTopSpeakerByFile_result() throw();
  Rpc_TopSpeakerInfo success;

  _kvpService_kvpIdentifyTopSpeakerByFile_result__isset __isset;

  void __set_success(const Rpc_TopSpeakerInfo& val);

  bool operator == (const kvpService_kvpIdentifyTopSpeakerByFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIdentifyTopSpeakerByFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIdentifyTopSpeakerByFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIdentifyTopSpeakerByFile_presult__isset {
  _kvpService_kvpIdentifyTopSpeakerByFile_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIdentifyTopSpeakerByFile_presult__isset;

class kvpService_kvpIdentifyTopSpeakerByFile_presult {
 public:


  virtual ~kvpService_kvpIdentifyTopSpeakerByFile_presult() throw();
  Rpc_TopSpeakerInfo* success;

  _kvpService_kvpIdentifyTopSpeakerByFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpIvectorLoadByFile_args__isset {
  _kvpService_kvpIvectorLoadByFile_args__isset() : vp_node(false), iv_file(false) {}
  bool vp_node :1;
  bool iv_file :1;
} _kvpService_kvpIvectorLoadByFile_args__isset;

class kvpService_kvpIvectorLoadByFile_args {
 public:

  kvpService_kvpIvectorLoadByFile_args(const kvpService_kvpIvectorLoadByFile_args&);
  kvpService_kvpIvectorLoadByFile_args& operator=(const kvpService_kvpIvectorLoadByFile_args&);
  kvpService_kvpIvectorLoadByFile_args() : vp_node(), iv_file() {
  }

  virtual ~kvpService_kvpIvectorLoadByFile_args() throw();
  std::string vp_node;
  std::string iv_file;

  _kvpService_kvpIvectorLoadByFile_args__isset __isset;

  void __set_vp_node(const std::string& val);

  void __set_iv_file(const std::string& val);

  bool operator == (const kvpService_kvpIvectorLoadByFile_args & rhs) const
  {
    if (!(vp_node == rhs.vp_node))
      return false;
    if (!(iv_file == rhs.iv_file))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIvectorLoadByFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIvectorLoadByFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpIvectorLoadByFile_pargs {
 public:


  virtual ~kvpService_kvpIvectorLoadByFile_pargs() throw();
  const std::string* vp_node;
  const std::string* iv_file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIvectorLoadByFile_result__isset {
  _kvpService_kvpIvectorLoadByFile_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIvectorLoadByFile_result__isset;

class kvpService_kvpIvectorLoadByFile_result {
 public:

  kvpService_kvpIvectorLoadByFile_result(const kvpService_kvpIvectorLoadByFile_result&);
  kvpService_kvpIvectorLoadByFile_result& operator=(const kvpService_kvpIvectorLoadByFile_result&);
  kvpService_kvpIvectorLoadByFile_result() : success(0) {
  }

  virtual ~kvpService_kvpIvectorLoadByFile_result() throw();
  int32_t success;

  _kvpService_kvpIvectorLoadByFile_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const kvpService_kvpIvectorLoadByFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIvectorLoadByFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIvectorLoadByFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIvectorLoadByFile_presult__isset {
  _kvpService_kvpIvectorLoadByFile_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIvectorLoadByFile_presult__isset;

class kvpService_kvpIvectorLoadByFile_presult {
 public:


  virtual ~kvpService_kvpIvectorLoadByFile_presult() throw();
  int32_t* success;

  _kvpService_kvpIvectorLoadByFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpInsertNode_args__isset {
  _kvpService_kvpInsertNode_args__isset() : vp_node(false) {}
  bool vp_node :1;
} _kvpService_kvpInsertNode_args__isset;

class kvpService_kvpInsertNode_args {
 public:

  kvpService_kvpInsertNode_args(const kvpService_kvpInsertNode_args&);
  kvpService_kvpInsertNode_args& operator=(const kvpService_kvpInsertNode_args&);
  kvpService_kvpInsertNode_args() : vp_node() {
  }

  virtual ~kvpService_kvpInsertNode_args() throw();
  std::string vp_node;

  _kvpService_kvpInsertNode_args__isset __isset;

  void __set_vp_node(const std::string& val);

  bool operator == (const kvpService_kvpInsertNode_args & rhs) const
  {
    if (!(vp_node == rhs.vp_node))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpInsertNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpInsertNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpInsertNode_pargs {
 public:


  virtual ~kvpService_kvpInsertNode_pargs() throw();
  const std::string* vp_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpInsertNode_result__isset {
  _kvpService_kvpInsertNode_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpInsertNode_result__isset;

class kvpService_kvpInsertNode_result {
 public:

  kvpService_kvpInsertNode_result(const kvpService_kvpInsertNode_result&);
  kvpService_kvpInsertNode_result& operator=(const kvpService_kvpInsertNode_result&);
  kvpService_kvpInsertNode_result() : success(0) {
  }

  virtual ~kvpService_kvpInsertNode_result() throw();
  int32_t success;

  _kvpService_kvpInsertNode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const kvpService_kvpInsertNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpInsertNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpInsertNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpInsertNode_presult__isset {
  _kvpService_kvpInsertNode_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpInsertNode_presult__isset;

class kvpService_kvpInsertNode_presult {
 public:


  virtual ~kvpService_kvpInsertNode_presult() throw();
  int32_t* success;

  _kvpService_kvpInsertNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpDeleteNode_args__isset {
  _kvpService_kvpDeleteNode_args__isset() : vp_node(false) {}
  bool vp_node :1;
} _kvpService_kvpDeleteNode_args__isset;

class kvpService_kvpDeleteNode_args {
 public:

  kvpService_kvpDeleteNode_args(const kvpService_kvpDeleteNode_args&);
  kvpService_kvpDeleteNode_args& operator=(const kvpService_kvpDeleteNode_args&);
  kvpService_kvpDeleteNode_args() : vp_node() {
  }

  virtual ~kvpService_kvpDeleteNode_args() throw();
  std::string vp_node;

  _kvpService_kvpDeleteNode_args__isset __isset;

  void __set_vp_node(const std::string& val);

  bool operator == (const kvpService_kvpDeleteNode_args & rhs) const
  {
    if (!(vp_node == rhs.vp_node))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpDeleteNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpDeleteNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpDeleteNode_pargs {
 public:


  virtual ~kvpService_kvpDeleteNode_pargs() throw();
  const std::string* vp_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpDeleteNode_result__isset {
  _kvpService_kvpDeleteNode_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpDeleteNode_result__isset;

class kvpService_kvpDeleteNode_result {
 public:

  kvpService_kvpDeleteNode_result(const kvpService_kvpDeleteNode_result&);
  kvpService_kvpDeleteNode_result& operator=(const kvpService_kvpDeleteNode_result&);
  kvpService_kvpDeleteNode_result() : success(0) {
  }

  virtual ~kvpService_kvpDeleteNode_result() throw();
  int32_t success;

  _kvpService_kvpDeleteNode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const kvpService_kvpDeleteNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpDeleteNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpDeleteNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpDeleteNode_presult__isset {
  _kvpService_kvpDeleteNode_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpDeleteNode_presult__isset;

class kvpService_kvpDeleteNode_presult {
 public:


  virtual ~kvpService_kvpDeleteNode_presult() throw();
  int32_t* success;

  _kvpService_kvpDeleteNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpMoveNode_args__isset {
  _kvpService_kvpMoveNode_args__isset() : spk_id(false), origin(false), target(false) {}
  bool spk_id :1;
  bool origin :1;
  bool target :1;
} _kvpService_kvpMoveNode_args__isset;

class kvpService_kvpMoveNode_args {
 public:

  kvpService_kvpMoveNode_args(const kvpService_kvpMoveNode_args&);
  kvpService_kvpMoveNode_args& operator=(const kvpService_kvpMoveNode_args&);
  kvpService_kvpMoveNode_args() : spk_id(), origin(), target() {
  }

  virtual ~kvpService_kvpMoveNode_args() throw();
  std::string spk_id;
  std::string origin;
  std::string target;

  _kvpService_kvpMoveNode_args__isset __isset;

  void __set_spk_id(const std::string& val);

  void __set_origin(const std::string& val);

  void __set_target(const std::string& val);

  bool operator == (const kvpService_kvpMoveNode_args & rhs) const
  {
    if (!(spk_id == rhs.spk_id))
      return false;
    if (!(origin == rhs.origin))
      return false;
    if (!(target == rhs.target))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpMoveNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpMoveNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpMoveNode_pargs {
 public:


  virtual ~kvpService_kvpMoveNode_pargs() throw();
  const std::string* spk_id;
  const std::string* origin;
  const std::string* target;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpMoveNode_result__isset {
  _kvpService_kvpMoveNode_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpMoveNode_result__isset;

class kvpService_kvpMoveNode_result {
 public:

  kvpService_kvpMoveNode_result(const kvpService_kvpMoveNode_result&);
  kvpService_kvpMoveNode_result& operator=(const kvpService_kvpMoveNode_result&);
  kvpService_kvpMoveNode_result() : success(0) {
  }

  virtual ~kvpService_kvpMoveNode_result() throw();
  int32_t success;

  _kvpService_kvpMoveNode_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const kvpService_kvpMoveNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpMoveNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpMoveNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpMoveNode_presult__isset {
  _kvpService_kvpMoveNode_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpMoveNode_presult__isset;

class kvpService_kvpMoveNode_presult {
 public:


  virtual ~kvpService_kvpMoveNode_presult() throw();
  int32_t* success;

  _kvpService_kvpMoveNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class kvpService_kvpGetFingerprint_args {
 public:

  kvpService_kvpGetFingerprint_args(const kvpService_kvpGetFingerprint_args&);
  kvpService_kvpGetFingerprint_args& operator=(const kvpService_kvpGetFingerprint_args&);
  kvpService_kvpGetFingerprint_args() {
  }

  virtual ~kvpService_kvpGetFingerprint_args() throw();

  bool operator == (const kvpService_kvpGetFingerprint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kvpService_kvpGetFingerprint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpGetFingerprint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpGetFingerprint_pargs {
 public:


  virtual ~kvpService_kvpGetFingerprint_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpGetFingerprint_result__isset {
  _kvpService_kvpGetFingerprint_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpGetFingerprint_result__isset;

class kvpService_kvpGetFingerprint_result {
 public:

  kvpService_kvpGetFingerprint_result(const kvpService_kvpGetFingerprint_result&);
  kvpService_kvpGetFingerprint_result& operator=(const kvpService_kvpGetFingerprint_result&);
  kvpService_kvpGetFingerprint_result() : success() {
  }

  virtual ~kvpService_kvpGetFingerprint_result() throw();
  std::string success;

  _kvpService_kvpGetFingerprint_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const kvpService_kvpGetFingerprint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpGetFingerprint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpGetFingerprint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpGetFingerprint_presult__isset {
  _kvpService_kvpGetFingerprint_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpGetFingerprint_presult__isset;

class kvpService_kvpGetFingerprint_presult {
 public:


  virtual ~kvpService_kvpGetFingerprint_presult() throw();
  std::string* success;

  _kvpService_kvpGetFingerprint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class kvpService_KvpGetLicenceInfo_args {
 public:

  kvpService_KvpGetLicenceInfo_args(const kvpService_KvpGetLicenceInfo_args&);
  kvpService_KvpGetLicenceInfo_args& operator=(const kvpService_KvpGetLicenceInfo_args&);
  kvpService_KvpGetLicenceInfo_args() {
  }

  virtual ~kvpService_KvpGetLicenceInfo_args() throw();

  bool operator == (const kvpService_KvpGetLicenceInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kvpService_KvpGetLicenceInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_KvpGetLicenceInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_KvpGetLicenceInfo_pargs {
 public:


  virtual ~kvpService_KvpGetLicenceInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_KvpGetLicenceInfo_result__isset {
  _kvpService_KvpGetLicenceInfo_result__isset() : success(false) {}
  bool success :1;
} _kvpService_KvpGetLicenceInfo_result__isset;

class kvpService_KvpGetLicenceInfo_result {
 public:

  kvpService_KvpGetLicenceInfo_result(const kvpService_KvpGetLicenceInfo_result&);
  kvpService_KvpGetLicenceInfo_result& operator=(const kvpService_KvpGetLicenceInfo_result&);
  kvpService_KvpGetLicenceInfo_result() {
  }

  virtual ~kvpService_KvpGetLicenceInfo_result() throw();
  Rpc_LicenceInfo success;

  _kvpService_KvpGetLicenceInfo_result__isset __isset;

  void __set_success(const Rpc_LicenceInfo& val);

  bool operator == (const kvpService_KvpGetLicenceInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_KvpGetLicenceInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_KvpGetLicenceInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_KvpGetLicenceInfo_presult__isset {
  _kvpService_KvpGetLicenceInfo_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_KvpGetLicenceInfo_presult__isset;

class kvpService_KvpGetLicenceInfo_presult {
 public:


  virtual ~kvpService_KvpGetLicenceInfo_presult() throw();
  Rpc_LicenceInfo* success;

  _kvpService_KvpGetLicenceInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpSetLicence_args__isset {
  _kvpService_kvpSetLicence_args__isset() : licence(false) {}
  bool licence :1;
} _kvpService_kvpSetLicence_args__isset;

class kvpService_kvpSetLicence_args {
 public:

  kvpService_kvpSetLicence_args(const kvpService_kvpSetLicence_args&);
  kvpService_kvpSetLicence_args& operator=(const kvpService_kvpSetLicence_args&);
  kvpService_kvpSetLicence_args() : licence() {
  }

  virtual ~kvpService_kvpSetLicence_args() throw();
  std::string licence;

  _kvpService_kvpSetLicence_args__isset __isset;

  void __set_licence(const std::string& val);

  bool operator == (const kvpService_kvpSetLicence_args & rhs) const
  {
    if (!(licence == rhs.licence))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpSetLicence_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpSetLicence_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpSetLicence_pargs {
 public:


  virtual ~kvpService_kvpSetLicence_pargs() throw();
  const std::string* licence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpSetLicence_result__isset {
  _kvpService_kvpSetLicence_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpSetLicence_result__isset;

class kvpService_kvpSetLicence_result {
 public:

  kvpService_kvpSetLicence_result(const kvpService_kvpSetLicence_result&);
  kvpService_kvpSetLicence_result& operator=(const kvpService_kvpSetLicence_result&);
  kvpService_kvpSetLicence_result() : success(0) {
  }

  virtual ~kvpService_kvpSetLicence_result() throw();
  int32_t success;

  _kvpService_kvpSetLicence_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const kvpService_kvpSetLicence_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpSetLicence_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpSetLicence_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpSetLicence_presult__isset {
  _kvpService_kvpSetLicence_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpSetLicence_presult__isset;

class kvpService_kvpSetLicence_presult {
 public:


  virtual ~kvpService_kvpSetLicence_presult() throw();
  int32_t* success;

  _kvpService_kvpSetLicence_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class kvpService_kvpIsLicenceValid_args {
 public:

  kvpService_kvpIsLicenceValid_args(const kvpService_kvpIsLicenceValid_args&);
  kvpService_kvpIsLicenceValid_args& operator=(const kvpService_kvpIsLicenceValid_args&);
  kvpService_kvpIsLicenceValid_args() {
  }

  virtual ~kvpService_kvpIsLicenceValid_args() throw();

  bool operator == (const kvpService_kvpIsLicenceValid_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kvpService_kvpIsLicenceValid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIsLicenceValid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpIsLicenceValid_pargs {
 public:


  virtual ~kvpService_kvpIsLicenceValid_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIsLicenceValid_result__isset {
  _kvpService_kvpIsLicenceValid_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIsLicenceValid_result__isset;

class kvpService_kvpIsLicenceValid_result {
 public:

  kvpService_kvpIsLicenceValid_result(const kvpService_kvpIsLicenceValid_result&);
  kvpService_kvpIsLicenceValid_result& operator=(const kvpService_kvpIsLicenceValid_result&);
  kvpService_kvpIsLicenceValid_result() : success(0) {
  }

  virtual ~kvpService_kvpIsLicenceValid_result() throw();
  bool success;

  _kvpService_kvpIsLicenceValid_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const kvpService_kvpIsLicenceValid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIsLicenceValid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIsLicenceValid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIsLicenceValid_presult__isset {
  _kvpService_kvpIsLicenceValid_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIsLicenceValid_presult__isset;

class kvpService_kvpIsLicenceValid_presult {
 public:


  virtual ~kvpService_kvpIsLicenceValid_presult() throw();
  bool* success;

  _kvpService_kvpIsLicenceValid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpRegisterSpeakerByStream_args__isset {
  _kvpService_kvpRegisterSpeakerByStream_args__isset() : utt(false), samp_rate(false), vp_node(false), vp_dir(false), spk_id(false) {}
  bool utt :1;
  bool samp_rate :1;
  bool vp_node :1;
  bool vp_dir :1;
  bool spk_id :1;
} _kvpService_kvpRegisterSpeakerByStream_args__isset;

class kvpService_kvpRegisterSpeakerByStream_args {
 public:

  kvpService_kvpRegisterSpeakerByStream_args(const kvpService_kvpRegisterSpeakerByStream_args&);
  kvpService_kvpRegisterSpeakerByStream_args& operator=(const kvpService_kvpRegisterSpeakerByStream_args&);
  kvpService_kvpRegisterSpeakerByStream_args() : samp_rate(0), vp_node(), vp_dir(), spk_id() {
  }

  virtual ~kvpService_kvpRegisterSpeakerByStream_args() throw();
  std::vector<int16_t>  utt;
  int32_t samp_rate;
  std::string vp_node;
  std::string vp_dir;
  std::string spk_id;

  _kvpService_kvpRegisterSpeakerByStream_args__isset __isset;

  void __set_utt(const std::vector<int16_t> & val);

  void __set_samp_rate(const int32_t val);

  void __set_vp_node(const std::string& val);

  void __set_vp_dir(const std::string& val);

  void __set_spk_id(const std::string& val);

  bool operator == (const kvpService_kvpRegisterSpeakerByStream_args & rhs) const
  {
    if (!(utt == rhs.utt))
      return false;
    if (!(samp_rate == rhs.samp_rate))
      return false;
    if (!(vp_node == rhs.vp_node))
      return false;
    if (!(vp_dir == rhs.vp_dir))
      return false;
    if (!(spk_id == rhs.spk_id))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpRegisterSpeakerByStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpRegisterSpeakerByStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpRegisterSpeakerByStream_pargs {
 public:


  virtual ~kvpService_kvpRegisterSpeakerByStream_pargs() throw();
  const std::vector<int16_t> * utt;
  const int32_t* samp_rate;
  const std::string* vp_node;
  const std::string* vp_dir;
  const std::string* spk_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpRegisterSpeakerByStream_result__isset {
  _kvpService_kvpRegisterSpeakerByStream_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpRegisterSpeakerByStream_result__isset;

class kvpService_kvpRegisterSpeakerByStream_result {
 public:

  kvpService_kvpRegisterSpeakerByStream_result(const kvpService_kvpRegisterSpeakerByStream_result&);
  kvpService_kvpRegisterSpeakerByStream_result& operator=(const kvpService_kvpRegisterSpeakerByStream_result&);
  kvpService_kvpRegisterSpeakerByStream_result() {
  }

  virtual ~kvpService_kvpRegisterSpeakerByStream_result() throw();
  Rpc_ModelInfo success;

  _kvpService_kvpRegisterSpeakerByStream_result__isset __isset;

  void __set_success(const Rpc_ModelInfo& val);

  bool operator == (const kvpService_kvpRegisterSpeakerByStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpRegisterSpeakerByStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpRegisterSpeakerByStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpRegisterSpeakerByStream_presult__isset {
  _kvpService_kvpRegisterSpeakerByStream_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpRegisterSpeakerByStream_presult__isset;

class kvpService_kvpRegisterSpeakerByStream_presult {
 public:


  virtual ~kvpService_kvpRegisterSpeakerByStream_presult() throw();
  Rpc_ModelInfo* success;

  _kvpService_kvpRegisterSpeakerByStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpIdentifyTopSpeakerByStream_args__isset {
  _kvpService_kvpIdentifyTopSpeakerByStream_args__isset() : utt(false), samp_rate(false), vp_node_arr(false), node_num(false), top_n(false), utt_type(false) {}
  bool utt :1;
  bool samp_rate :1;
  bool vp_node_arr :1;
  bool node_num :1;
  bool top_n :1;
  bool utt_type :1;
} _kvpService_kvpIdentifyTopSpeakerByStream_args__isset;

class kvpService_kvpIdentifyTopSpeakerByStream_args {
 public:

  kvpService_kvpIdentifyTopSpeakerByStream_args(const kvpService_kvpIdentifyTopSpeakerByStream_args&);
  kvpService_kvpIdentifyTopSpeakerByStream_args& operator=(const kvpService_kvpIdentifyTopSpeakerByStream_args&);
  kvpService_kvpIdentifyTopSpeakerByStream_args() : samp_rate(0), node_num(0), top_n(0), utt_type(0) {
  }

  virtual ~kvpService_kvpIdentifyTopSpeakerByStream_args() throw();
  std::vector<int16_t>  utt;
  int32_t samp_rate;
  std::vector<std::string>  vp_node_arr;
  int32_t node_num;
  int32_t top_n;
  int32_t utt_type;

  _kvpService_kvpIdentifyTopSpeakerByStream_args__isset __isset;

  void __set_utt(const std::vector<int16_t> & val);

  void __set_samp_rate(const int32_t val);

  void __set_vp_node_arr(const std::vector<std::string> & val);

  void __set_node_num(const int32_t val);

  void __set_top_n(const int32_t val);

  void __set_utt_type(const int32_t val);

  bool operator == (const kvpService_kvpIdentifyTopSpeakerByStream_args & rhs) const
  {
    if (!(utt == rhs.utt))
      return false;
    if (!(samp_rate == rhs.samp_rate))
      return false;
    if (!(vp_node_arr == rhs.vp_node_arr))
      return false;
    if (!(node_num == rhs.node_num))
      return false;
    if (!(top_n == rhs.top_n))
      return false;
    if (!(utt_type == rhs.utt_type))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIdentifyTopSpeakerByStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIdentifyTopSpeakerByStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpIdentifyTopSpeakerByStream_pargs {
 public:


  virtual ~kvpService_kvpIdentifyTopSpeakerByStream_pargs() throw();
  const std::vector<int16_t> * utt;
  const int32_t* samp_rate;
  const std::vector<std::string> * vp_node_arr;
  const int32_t* node_num;
  const int32_t* top_n;
  const int32_t* utt_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIdentifyTopSpeakerByStream_result__isset {
  _kvpService_kvpIdentifyTopSpeakerByStream_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIdentifyTopSpeakerByStream_result__isset;

class kvpService_kvpIdentifyTopSpeakerByStream_result {
 public:

  kvpService_kvpIdentifyTopSpeakerByStream_result(const kvpService_kvpIdentifyTopSpeakerByStream_result&);
  kvpService_kvpIdentifyTopSpeakerByStream_result& operator=(const kvpService_kvpIdentifyTopSpeakerByStream_result&);
  kvpService_kvpIdentifyTopSpeakerByStream_result() {
  }

  virtual ~kvpService_kvpIdentifyTopSpeakerByStream_result() throw();
  Rpc_TopSpeakerInfo success;

  _kvpService_kvpIdentifyTopSpeakerByStream_result__isset __isset;

  void __set_success(const Rpc_TopSpeakerInfo& val);

  bool operator == (const kvpService_kvpIdentifyTopSpeakerByStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpIdentifyTopSpeakerByStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpIdentifyTopSpeakerByStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpIdentifyTopSpeakerByStream_presult__isset {
  _kvpService_kvpIdentifyTopSpeakerByStream_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpIdentifyTopSpeakerByStream_presult__isset;

class kvpService_kvpIdentifyTopSpeakerByStream_presult {
 public:


  virtual ~kvpService_kvpIdentifyTopSpeakerByStream_presult() throw();
  Rpc_TopSpeakerInfo* success;

  _kvpService_kvpIdentifyTopSpeakerByStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpVerifySpeakerByStream_args__isset {
  _kvpService_kvpVerifySpeakerByStream_args__isset() : utt(false), samp_rate(false), spk_id(false), vp_node(false), utt_type(false) {}
  bool utt :1;
  bool samp_rate :1;
  bool spk_id :1;
  bool vp_node :1;
  bool utt_type :1;
} _kvpService_kvpVerifySpeakerByStream_args__isset;

class kvpService_kvpVerifySpeakerByStream_args {
 public:

  kvpService_kvpVerifySpeakerByStream_args(const kvpService_kvpVerifySpeakerByStream_args&);
  kvpService_kvpVerifySpeakerByStream_args& operator=(const kvpService_kvpVerifySpeakerByStream_args&);
  kvpService_kvpVerifySpeakerByStream_args() : samp_rate(0), spk_id(), vp_node(), utt_type(0) {
  }

  virtual ~kvpService_kvpVerifySpeakerByStream_args() throw();
  std::vector<int16_t>  utt;
  int32_t samp_rate;
  std::string spk_id;
  std::string vp_node;
  int32_t utt_type;

  _kvpService_kvpVerifySpeakerByStream_args__isset __isset;

  void __set_utt(const std::vector<int16_t> & val);

  void __set_samp_rate(const int32_t val);

  void __set_spk_id(const std::string& val);

  void __set_vp_node(const std::string& val);

  void __set_utt_type(const int32_t val);

  bool operator == (const kvpService_kvpVerifySpeakerByStream_args & rhs) const
  {
    if (!(utt == rhs.utt))
      return false;
    if (!(samp_rate == rhs.samp_rate))
      return false;
    if (!(spk_id == rhs.spk_id))
      return false;
    if (!(vp_node == rhs.vp_node))
      return false;
    if (!(utt_type == rhs.utt_type))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpVerifySpeakerByStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpVerifySpeakerByStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpVerifySpeakerByStream_pargs {
 public:


  virtual ~kvpService_kvpVerifySpeakerByStream_pargs() throw();
  const std::vector<int16_t> * utt;
  const int32_t* samp_rate;
  const std::string* spk_id;
  const std::string* vp_node;
  const int32_t* utt_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpVerifySpeakerByStream_result__isset {
  _kvpService_kvpVerifySpeakerByStream_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpVerifySpeakerByStream_result__isset;

class kvpService_kvpVerifySpeakerByStream_result {
 public:

  kvpService_kvpVerifySpeakerByStream_result(const kvpService_kvpVerifySpeakerByStream_result&);
  kvpService_kvpVerifySpeakerByStream_result& operator=(const kvpService_kvpVerifySpeakerByStream_result&);
  kvpService_kvpVerifySpeakerByStream_result() {
  }

  virtual ~kvpService_kvpVerifySpeakerByStream_result() throw();
  Rpc_ScoreInfo success;

  _kvpService_kvpVerifySpeakerByStream_result__isset __isset;

  void __set_success(const Rpc_ScoreInfo& val);

  bool operator == (const kvpService_kvpVerifySpeakerByStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpVerifySpeakerByStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpVerifySpeakerByStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpVerifySpeakerByStream_presult__isset {
  _kvpService_kvpVerifySpeakerByStream_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpVerifySpeakerByStream_presult__isset;

class kvpService_kvpVerifySpeakerByStream_presult {
 public:


  virtual ~kvpService_kvpVerifySpeakerByStream_presult() throw();
  Rpc_ScoreInfo* success;

  _kvpService_kvpVerifySpeakerByStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpTempVerifySpeakerByStream_args__isset {
  _kvpService_kvpTempVerifySpeakerByStream_args__isset() : utt1(false), samp_rate_1(false), utt_type1(false), utt2(false), samp_rate_2(false), utt_type2(false) {}
  bool utt1 :1;
  bool samp_rate_1 :1;
  bool utt_type1 :1;
  bool utt2 :1;
  bool samp_rate_2 :1;
  bool utt_type2 :1;
} _kvpService_kvpTempVerifySpeakerByStream_args__isset;

class kvpService_kvpTempVerifySpeakerByStream_args {
 public:

  kvpService_kvpTempVerifySpeakerByStream_args(const kvpService_kvpTempVerifySpeakerByStream_args&);
  kvpService_kvpTempVerifySpeakerByStream_args& operator=(const kvpService_kvpTempVerifySpeakerByStream_args&);
  kvpService_kvpTempVerifySpeakerByStream_args() : samp_rate_1(0), utt_type1(0), samp_rate_2(0), utt_type2(0) {
  }

  virtual ~kvpService_kvpTempVerifySpeakerByStream_args() throw();
  std::vector<int16_t>  utt1;
  int32_t samp_rate_1;
  int32_t utt_type1;
  std::vector<int16_t>  utt2;
  int32_t samp_rate_2;
  int32_t utt_type2;

  _kvpService_kvpTempVerifySpeakerByStream_args__isset __isset;

  void __set_utt1(const std::vector<int16_t> & val);

  void __set_samp_rate_1(const int32_t val);

  void __set_utt_type1(const int32_t val);

  void __set_utt2(const std::vector<int16_t> & val);

  void __set_samp_rate_2(const int32_t val);

  void __set_utt_type2(const int32_t val);

  bool operator == (const kvpService_kvpTempVerifySpeakerByStream_args & rhs) const
  {
    if (!(utt1 == rhs.utt1))
      return false;
    if (!(samp_rate_1 == rhs.samp_rate_1))
      return false;
    if (!(utt_type1 == rhs.utt_type1))
      return false;
    if (!(utt2 == rhs.utt2))
      return false;
    if (!(samp_rate_2 == rhs.samp_rate_2))
      return false;
    if (!(utt_type2 == rhs.utt_type2))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpTempVerifySpeakerByStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpTempVerifySpeakerByStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpTempVerifySpeakerByStream_pargs {
 public:


  virtual ~kvpService_kvpTempVerifySpeakerByStream_pargs() throw();
  const std::vector<int16_t> * utt1;
  const int32_t* samp_rate_1;
  const int32_t* utt_type1;
  const std::vector<int16_t> * utt2;
  const int32_t* samp_rate_2;
  const int32_t* utt_type2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpTempVerifySpeakerByStream_result__isset {
  _kvpService_kvpTempVerifySpeakerByStream_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpTempVerifySpeakerByStream_result__isset;

class kvpService_kvpTempVerifySpeakerByStream_result {
 public:

  kvpService_kvpTempVerifySpeakerByStream_result(const kvpService_kvpTempVerifySpeakerByStream_result&);
  kvpService_kvpTempVerifySpeakerByStream_result& operator=(const kvpService_kvpTempVerifySpeakerByStream_result&);
  kvpService_kvpTempVerifySpeakerByStream_result() {
  }

  virtual ~kvpService_kvpTempVerifySpeakerByStream_result() throw();
  Rpc_ScoreInfo success;

  _kvpService_kvpTempVerifySpeakerByStream_result__isset __isset;

  void __set_success(const Rpc_ScoreInfo& val);

  bool operator == (const kvpService_kvpTempVerifySpeakerByStream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpTempVerifySpeakerByStream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpTempVerifySpeakerByStream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpTempVerifySpeakerByStream_presult__isset {
  _kvpService_kvpTempVerifySpeakerByStream_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpTempVerifySpeakerByStream_presult__isset;

class kvpService_kvpTempVerifySpeakerByStream_presult {
 public:


  virtual ~kvpService_kvpTempVerifySpeakerByStream_presult() throw();
  Rpc_ScoreInfo* success;

  _kvpService_kvpTempVerifySpeakerByStream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _kvpService_kvpNodeGetList_args__isset {
  _kvpService_kvpNodeGetList_args__isset() : vp_node(false) {}
  bool vp_node :1;
} _kvpService_kvpNodeGetList_args__isset;

class kvpService_kvpNodeGetList_args {
 public:

  kvpService_kvpNodeGetList_args(const kvpService_kvpNodeGetList_args&);
  kvpService_kvpNodeGetList_args& operator=(const kvpService_kvpNodeGetList_args&);
  kvpService_kvpNodeGetList_args() : vp_node() {
  }

  virtual ~kvpService_kvpNodeGetList_args() throw();
  std::string vp_node;

  _kvpService_kvpNodeGetList_args__isset __isset;

  void __set_vp_node(const std::string& val);

  bool operator == (const kvpService_kvpNodeGetList_args & rhs) const
  {
    if (!(vp_node == rhs.vp_node))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpNodeGetList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpNodeGetList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class kvpService_kvpNodeGetList_pargs {
 public:


  virtual ~kvpService_kvpNodeGetList_pargs() throw();
  const std::string* vp_node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpNodeGetList_result__isset {
  _kvpService_kvpNodeGetList_result__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpNodeGetList_result__isset;

class kvpService_kvpNodeGetList_result {
 public:

  kvpService_kvpNodeGetList_result(const kvpService_kvpNodeGetList_result&);
  kvpService_kvpNodeGetList_result& operator=(const kvpService_kvpNodeGetList_result&);
  kvpService_kvpNodeGetList_result() {
  }

  virtual ~kvpService_kvpNodeGetList_result() throw();
  std::vector<std::string>  success;

  _kvpService_kvpNodeGetList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const kvpService_kvpNodeGetList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const kvpService_kvpNodeGetList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kvpService_kvpNodeGetList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _kvpService_kvpNodeGetList_presult__isset {
  _kvpService_kvpNodeGetList_presult__isset() : success(false) {}
  bool success :1;
} _kvpService_kvpNodeGetList_presult__isset;

class kvpService_kvpNodeGetList_presult {
 public:


  virtual ~kvpService_kvpNodeGetList_presult() throw();
  std::vector<std::string> * success;

  _kvpService_kvpNodeGetList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class kvpServiceClient : virtual public kvpServiceIf {
 public:
  kvpServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  kvpServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void kvpPing(std::string& _return);
  void send_kvpPing();
  void recv_kvpPing(std::string& _return);
  void kvpGetUttInfo(Rpc_UttInfo& _return, const std::string& wavpath);
  void send_kvpGetUttInfo(const std::string& wavpath);
  void recv_kvpGetUttInfo(Rpc_UttInfo& _return);
  int32_t kvpModelRemoveBySpkid(const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  void send_kvpModelRemoveBySpkid(const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  int32_t recv_kvpModelRemoveBySpkid();
  void kvpRegisterSpeakerByFile(Rpc_ModelInfo& _return, const std::string& utt, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id, const int32_t sp_chan);
  void send_kvpRegisterSpeakerByFile(const std::string& utt, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id, const int32_t sp_chan);
  void recv_kvpRegisterSpeakerByFile(Rpc_ModelInfo& _return);
  void kvpVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type, const int32_t sp_chan);
  void send_kvpVerifySpeakerByFile(const std::string& utt, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type, const int32_t sp_chan);
  void recv_kvpVerifySpeakerByFile(Rpc_ScoreInfo& _return);
  void kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt1, const int32_t sp_chan1, const int32_t utt_type1, const std::string& utt2, const int32_t sp_chan2, const int32_t utt_type2);
  void send_kvpTempVerifySpeakerByFile(const std::string& utt1, const int32_t sp_chan1, const int32_t utt_type1, const std::string& utt2, const int32_t sp_chan2, const int32_t utt_type2);
  void recv_kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& _return);
  void kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& _return, const std::string& utt, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type, const int32_t sp_chan);
  void send_kvpIdentifyTopSpeakerByFile(const std::string& utt, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type, const int32_t sp_chan);
  void recv_kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& _return);
  int32_t kvpIvectorLoadByFile(const std::string& vp_node, const std::string& iv_file);
  void send_kvpIvectorLoadByFile(const std::string& vp_node, const std::string& iv_file);
  int32_t recv_kvpIvectorLoadByFile();
  int32_t kvpInsertNode(const std::string& vp_node);
  void send_kvpInsertNode(const std::string& vp_node);
  int32_t recv_kvpInsertNode();
  int32_t kvpDeleteNode(const std::string& vp_node);
  void send_kvpDeleteNode(const std::string& vp_node);
  int32_t recv_kvpDeleteNode();
  int32_t kvpMoveNode(const std::string& spk_id, const std::string& origin, const std::string& target);
  void send_kvpMoveNode(const std::string& spk_id, const std::string& origin, const std::string& target);
  int32_t recv_kvpMoveNode();
  void kvpGetFingerprint(std::string& _return);
  void send_kvpGetFingerprint();
  void recv_kvpGetFingerprint(std::string& _return);
  void KvpGetLicenceInfo(Rpc_LicenceInfo& _return);
  void send_KvpGetLicenceInfo();
  void recv_KvpGetLicenceInfo(Rpc_LicenceInfo& _return);
  int32_t kvpSetLicence(const std::string& licence);
  void send_kvpSetLicence(const std::string& licence);
  int32_t recv_kvpSetLicence();
  bool kvpIsLicenceValid();
  void send_kvpIsLicenceValid();
  bool recv_kvpIsLicenceValid();
  void kvpRegisterSpeakerByStream(Rpc_ModelInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  void send_kvpRegisterSpeakerByStream(const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  void recv_kvpRegisterSpeakerByStream(Rpc_ModelInfo& _return);
  void kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type);
  void send_kvpIdentifyTopSpeakerByStream(const std::vector<int16_t> & utt, const int32_t samp_rate, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type);
  void recv_kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& _return);
  void kvpVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type);
  void send_kvpVerifySpeakerByStream(const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type);
  void recv_kvpVerifySpeakerByStream(Rpc_ScoreInfo& _return);
  void kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt1, const int32_t samp_rate_1, const int32_t utt_type1, const std::vector<int16_t> & utt2, const int32_t samp_rate_2, const int32_t utt_type2);
  void send_kvpTempVerifySpeakerByStream(const std::vector<int16_t> & utt1, const int32_t samp_rate_1, const int32_t utt_type1, const std::vector<int16_t> & utt2, const int32_t samp_rate_2, const int32_t utt_type2);
  void recv_kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& _return);
  void kvpNodeGetList(std::vector<std::string> & _return, const std::string& vp_node);
  void send_kvpNodeGetList(const std::string& vp_node);
  void recv_kvpNodeGetList(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class kvpServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<kvpServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (kvpServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_kvpPing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpGetUttInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpModelRemoveBySpkid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpRegisterSpeakerByFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpVerifySpeakerByFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpTempVerifySpeakerByFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpIdentifyTopSpeakerByFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpIvectorLoadByFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpInsertNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpDeleteNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpMoveNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpGetFingerprint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KvpGetLicenceInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpSetLicence(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpIsLicenceValid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpRegisterSpeakerByStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpIdentifyTopSpeakerByStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpVerifySpeakerByStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpTempVerifySpeakerByStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvpNodeGetList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  kvpServiceProcessor(boost::shared_ptr<kvpServiceIf> iface) :
    iface_(iface) {
    processMap_["kvpPing"] = &kvpServiceProcessor::process_kvpPing;
    processMap_["kvpGetUttInfo"] = &kvpServiceProcessor::process_kvpGetUttInfo;
    processMap_["kvpModelRemoveBySpkid"] = &kvpServiceProcessor::process_kvpModelRemoveBySpkid;
    processMap_["kvpRegisterSpeakerByFile"] = &kvpServiceProcessor::process_kvpRegisterSpeakerByFile;
    processMap_["kvpVerifySpeakerByFile"] = &kvpServiceProcessor::process_kvpVerifySpeakerByFile;
    processMap_["kvpTempVerifySpeakerByFile"] = &kvpServiceProcessor::process_kvpTempVerifySpeakerByFile;
    processMap_["kvpIdentifyTopSpeakerByFile"] = &kvpServiceProcessor::process_kvpIdentifyTopSpeakerByFile;
    processMap_["kvpIvectorLoadByFile"] = &kvpServiceProcessor::process_kvpIvectorLoadByFile;
    processMap_["kvpInsertNode"] = &kvpServiceProcessor::process_kvpInsertNode;
    processMap_["kvpDeleteNode"] = &kvpServiceProcessor::process_kvpDeleteNode;
    processMap_["kvpMoveNode"] = &kvpServiceProcessor::process_kvpMoveNode;
    processMap_["kvpGetFingerprint"] = &kvpServiceProcessor::process_kvpGetFingerprint;
    processMap_["KvpGetLicenceInfo"] = &kvpServiceProcessor::process_KvpGetLicenceInfo;
    processMap_["kvpSetLicence"] = &kvpServiceProcessor::process_kvpSetLicence;
    processMap_["kvpIsLicenceValid"] = &kvpServiceProcessor::process_kvpIsLicenceValid;
    processMap_["kvpRegisterSpeakerByStream"] = &kvpServiceProcessor::process_kvpRegisterSpeakerByStream;
    processMap_["kvpIdentifyTopSpeakerByStream"] = &kvpServiceProcessor::process_kvpIdentifyTopSpeakerByStream;
    processMap_["kvpVerifySpeakerByStream"] = &kvpServiceProcessor::process_kvpVerifySpeakerByStream;
    processMap_["kvpTempVerifySpeakerByStream"] = &kvpServiceProcessor::process_kvpTempVerifySpeakerByStream;
    processMap_["kvpNodeGetList"] = &kvpServiceProcessor::process_kvpNodeGetList;
  }

  virtual ~kvpServiceProcessor() {}
};

class kvpServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  kvpServiceProcessorFactory(const ::boost::shared_ptr< kvpServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< kvpServiceIfFactory > handlerFactory_;
};

class kvpServiceMultiface : virtual public kvpServiceIf {
 public:
  kvpServiceMultiface(std::vector<boost::shared_ptr<kvpServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~kvpServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<kvpServiceIf> > ifaces_;
  kvpServiceMultiface() {}
  void add(boost::shared_ptr<kvpServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void kvpPing(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpPing(_return);
    }
    ifaces_[i]->kvpPing(_return);
    return;
  }

  void kvpGetUttInfo(Rpc_UttInfo& _return, const std::string& wavpath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpGetUttInfo(_return, wavpath);
    }
    ifaces_[i]->kvpGetUttInfo(_return, wavpath);
    return;
  }

  int32_t kvpModelRemoveBySpkid(const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpModelRemoveBySpkid(vp_node, vp_dir, spk_id);
    }
    return ifaces_[i]->kvpModelRemoveBySpkid(vp_node, vp_dir, spk_id);
  }

  void kvpRegisterSpeakerByFile(Rpc_ModelInfo& _return, const std::string& utt, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id, const int32_t sp_chan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpRegisterSpeakerByFile(_return, utt, vp_node, vp_dir, spk_id, sp_chan);
    }
    ifaces_[i]->kvpRegisterSpeakerByFile(_return, utt, vp_node, vp_dir, spk_id, sp_chan);
    return;
  }

  void kvpVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type, const int32_t sp_chan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpVerifySpeakerByFile(_return, utt, spk_id, vp_node, utt_type, sp_chan);
    }
    ifaces_[i]->kvpVerifySpeakerByFile(_return, utt, spk_id, vp_node, utt_type, sp_chan);
    return;
  }

  void kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt1, const int32_t sp_chan1, const int32_t utt_type1, const std::string& utt2, const int32_t sp_chan2, const int32_t utt_type2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpTempVerifySpeakerByFile(_return, utt1, sp_chan1, utt_type1, utt2, sp_chan2, utt_type2);
    }
    ifaces_[i]->kvpTempVerifySpeakerByFile(_return, utt1, sp_chan1, utt_type1, utt2, sp_chan2, utt_type2);
    return;
  }

  void kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& _return, const std::string& utt, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type, const int32_t sp_chan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpIdentifyTopSpeakerByFile(_return, utt, vp_node_arr, node_num, top_n, utt_type, sp_chan);
    }
    ifaces_[i]->kvpIdentifyTopSpeakerByFile(_return, utt, vp_node_arr, node_num, top_n, utt_type, sp_chan);
    return;
  }

  int32_t kvpIvectorLoadByFile(const std::string& vp_node, const std::string& iv_file) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpIvectorLoadByFile(vp_node, iv_file);
    }
    return ifaces_[i]->kvpIvectorLoadByFile(vp_node, iv_file);
  }

  int32_t kvpInsertNode(const std::string& vp_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpInsertNode(vp_node);
    }
    return ifaces_[i]->kvpInsertNode(vp_node);
  }

  int32_t kvpDeleteNode(const std::string& vp_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpDeleteNode(vp_node);
    }
    return ifaces_[i]->kvpDeleteNode(vp_node);
  }

  int32_t kvpMoveNode(const std::string& spk_id, const std::string& origin, const std::string& target) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpMoveNode(spk_id, origin, target);
    }
    return ifaces_[i]->kvpMoveNode(spk_id, origin, target);
  }

  void kvpGetFingerprint(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpGetFingerprint(_return);
    }
    ifaces_[i]->kvpGetFingerprint(_return);
    return;
  }

  void KvpGetLicenceInfo(Rpc_LicenceInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KvpGetLicenceInfo(_return);
    }
    ifaces_[i]->KvpGetLicenceInfo(_return);
    return;
  }

  int32_t kvpSetLicence(const std::string& licence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpSetLicence(licence);
    }
    return ifaces_[i]->kvpSetLicence(licence);
  }

  bool kvpIsLicenceValid() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpIsLicenceValid();
    }
    return ifaces_[i]->kvpIsLicenceValid();
  }

  void kvpRegisterSpeakerByStream(Rpc_ModelInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpRegisterSpeakerByStream(_return, utt, samp_rate, vp_node, vp_dir, spk_id);
    }
    ifaces_[i]->kvpRegisterSpeakerByStream(_return, utt, samp_rate, vp_node, vp_dir, spk_id);
    return;
  }

  void kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpIdentifyTopSpeakerByStream(_return, utt, samp_rate, vp_node_arr, node_num, top_n, utt_type);
    }
    ifaces_[i]->kvpIdentifyTopSpeakerByStream(_return, utt, samp_rate, vp_node_arr, node_num, top_n, utt_type);
    return;
  }

  void kvpVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpVerifySpeakerByStream(_return, utt, samp_rate, spk_id, vp_node, utt_type);
    }
    ifaces_[i]->kvpVerifySpeakerByStream(_return, utt, samp_rate, spk_id, vp_node, utt_type);
    return;
  }

  void kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt1, const int32_t samp_rate_1, const int32_t utt_type1, const std::vector<int16_t> & utt2, const int32_t samp_rate_2, const int32_t utt_type2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpTempVerifySpeakerByStream(_return, utt1, samp_rate_1, utt_type1, utt2, samp_rate_2, utt_type2);
    }
    ifaces_[i]->kvpTempVerifySpeakerByStream(_return, utt1, samp_rate_1, utt_type1, utt2, samp_rate_2, utt_type2);
    return;
  }

  void kvpNodeGetList(std::vector<std::string> & _return, const std::string& vp_node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvpNodeGetList(_return, vp_node);
    }
    ifaces_[i]->kvpNodeGetList(_return, vp_node);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class kvpServiceConcurrentClient : virtual public kvpServiceIf {
 public:
  kvpServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  kvpServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void kvpPing(std::string& _return);
  int32_t send_kvpPing();
  void recv_kvpPing(std::string& _return, const int32_t seqid);
  void kvpGetUttInfo(Rpc_UttInfo& _return, const std::string& wavpath);
  int32_t send_kvpGetUttInfo(const std::string& wavpath);
  void recv_kvpGetUttInfo(Rpc_UttInfo& _return, const int32_t seqid);
  int32_t kvpModelRemoveBySpkid(const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  int32_t send_kvpModelRemoveBySpkid(const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  int32_t recv_kvpModelRemoveBySpkid(const int32_t seqid);
  void kvpRegisterSpeakerByFile(Rpc_ModelInfo& _return, const std::string& utt, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id, const int32_t sp_chan);
  int32_t send_kvpRegisterSpeakerByFile(const std::string& utt, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id, const int32_t sp_chan);
  void recv_kvpRegisterSpeakerByFile(Rpc_ModelInfo& _return, const int32_t seqid);
  void kvpVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type, const int32_t sp_chan);
  int32_t send_kvpVerifySpeakerByFile(const std::string& utt, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type, const int32_t sp_chan);
  void recv_kvpVerifySpeakerByFile(Rpc_ScoreInfo& _return, const int32_t seqid);
  void kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& _return, const std::string& utt1, const int32_t sp_chan1, const int32_t utt_type1, const std::string& utt2, const int32_t sp_chan2, const int32_t utt_type2);
  int32_t send_kvpTempVerifySpeakerByFile(const std::string& utt1, const int32_t sp_chan1, const int32_t utt_type1, const std::string& utt2, const int32_t sp_chan2, const int32_t utt_type2);
  void recv_kvpTempVerifySpeakerByFile(Rpc_ScoreInfo& _return, const int32_t seqid);
  void kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& _return, const std::string& utt, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type, const int32_t sp_chan);
  int32_t send_kvpIdentifyTopSpeakerByFile(const std::string& utt, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type, const int32_t sp_chan);
  void recv_kvpIdentifyTopSpeakerByFile(Rpc_TopSpeakerInfo& _return, const int32_t seqid);
  int32_t kvpIvectorLoadByFile(const std::string& vp_node, const std::string& iv_file);
  int32_t send_kvpIvectorLoadByFile(const std::string& vp_node, const std::string& iv_file);
  int32_t recv_kvpIvectorLoadByFile(const int32_t seqid);
  int32_t kvpInsertNode(const std::string& vp_node);
  int32_t send_kvpInsertNode(const std::string& vp_node);
  int32_t recv_kvpInsertNode(const int32_t seqid);
  int32_t kvpDeleteNode(const std::string& vp_node);
  int32_t send_kvpDeleteNode(const std::string& vp_node);
  int32_t recv_kvpDeleteNode(const int32_t seqid);
  int32_t kvpMoveNode(const std::string& spk_id, const std::string& origin, const std::string& target);
  int32_t send_kvpMoveNode(const std::string& spk_id, const std::string& origin, const std::string& target);
  int32_t recv_kvpMoveNode(const int32_t seqid);
  void kvpGetFingerprint(std::string& _return);
  int32_t send_kvpGetFingerprint();
  void recv_kvpGetFingerprint(std::string& _return, const int32_t seqid);
  void KvpGetLicenceInfo(Rpc_LicenceInfo& _return);
  int32_t send_KvpGetLicenceInfo();
  void recv_KvpGetLicenceInfo(Rpc_LicenceInfo& _return, const int32_t seqid);
  int32_t kvpSetLicence(const std::string& licence);
  int32_t send_kvpSetLicence(const std::string& licence);
  int32_t recv_kvpSetLicence(const int32_t seqid);
  bool kvpIsLicenceValid();
  int32_t send_kvpIsLicenceValid();
  bool recv_kvpIsLicenceValid(const int32_t seqid);
  void kvpRegisterSpeakerByStream(Rpc_ModelInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  int32_t send_kvpRegisterSpeakerByStream(const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& vp_node, const std::string& vp_dir, const std::string& spk_id);
  void recv_kvpRegisterSpeakerByStream(Rpc_ModelInfo& _return, const int32_t seqid);
  void kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type);
  int32_t send_kvpIdentifyTopSpeakerByStream(const std::vector<int16_t> & utt, const int32_t samp_rate, const std::vector<std::string> & vp_node_arr, const int32_t node_num, const int32_t top_n, const int32_t utt_type);
  void recv_kvpIdentifyTopSpeakerByStream(Rpc_TopSpeakerInfo& _return, const int32_t seqid);
  void kvpVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type);
  int32_t send_kvpVerifySpeakerByStream(const std::vector<int16_t> & utt, const int32_t samp_rate, const std::string& spk_id, const std::string& vp_node, const int32_t utt_type);
  void recv_kvpVerifySpeakerByStream(Rpc_ScoreInfo& _return, const int32_t seqid);
  void kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& _return, const std::vector<int16_t> & utt1, const int32_t samp_rate_1, const int32_t utt_type1, const std::vector<int16_t> & utt2, const int32_t samp_rate_2, const int32_t utt_type2);
  int32_t send_kvpTempVerifySpeakerByStream(const std::vector<int16_t> & utt1, const int32_t samp_rate_1, const int32_t utt_type1, const std::vector<int16_t> & utt2, const int32_t samp_rate_2, const int32_t utt_type2);
  void recv_kvpTempVerifySpeakerByStream(Rpc_ScoreInfo& _return, const int32_t seqid);
  void kvpNodeGetList(std::vector<std::string> & _return, const std::string& vp_node);
  int32_t send_kvpNodeGetList(const std::string& vp_node);
  void recv_kvpNodeGetList(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
