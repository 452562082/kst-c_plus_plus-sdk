/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "asv_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Rpc_UttInfo::~Rpc_UttInfo() throw() {
}


void Rpc_UttInfo::__set_Utt(const std::string& val) {
  this->Utt = val;
}

void Rpc_UttInfo::__set_Duration(const int64_t val) {
  this->Duration = val;
}

void Rpc_UttInfo::__set_ValidDuration(const int64_t val) {
  this->ValidDuration = val;
}

void Rpc_UttInfo::__set_Channels(const int32_t val) {
  this->Channels = val;
}

void Rpc_UttInfo::__set_SampRate(const int32_t val) {
  this->SampRate = val;
}

void Rpc_UttInfo::__set_ErrCode(const int32_t val) {
  this->ErrCode = val;
}

void Rpc_UttInfo::__set_ErrMsg(const std::string& val) {
  this->ErrMsg = val;
}

void Rpc_UttInfo::__set_RetCode(const int32_t val) {
  this->RetCode = val;
}

uint32_t Rpc_UttInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Utt);
          this->__isset.Utt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Duration);
          this->__isset.Duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ValidDuration);
          this->__isset.ValidDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Channels);
          this->__isset.Channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SampRate);
          this->__isset.SampRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ErrCode);
          this->__isset.ErrCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ErrMsg);
          this->__isset.ErrMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RetCode);
          this->__isset.RetCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rpc_UttInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rpc_UttInfo");

  xfer += oprot->writeFieldBegin("Utt", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Utt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Duration", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->Duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ValidDuration", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->ValidDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Channels", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Channels);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SampRate", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->SampRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrCode", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->ErrCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrMsg", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->ErrMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RetCode", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->RetCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rpc_UttInfo &a, Rpc_UttInfo &b) {
  using ::std::swap;
  swap(a.Utt, b.Utt);
  swap(a.Duration, b.Duration);
  swap(a.ValidDuration, b.ValidDuration);
  swap(a.Channels, b.Channels);
  swap(a.SampRate, b.SampRate);
  swap(a.ErrCode, b.ErrCode);
  swap(a.ErrMsg, b.ErrMsg);
  swap(a.RetCode, b.RetCode);
  swap(a.__isset, b.__isset);
}

Rpc_UttInfo::Rpc_UttInfo(const Rpc_UttInfo& other0) {
  Utt = other0.Utt;
  Duration = other0.Duration;
  ValidDuration = other0.ValidDuration;
  Channels = other0.Channels;
  SampRate = other0.SampRate;
  ErrCode = other0.ErrCode;
  ErrMsg = other0.ErrMsg;
  RetCode = other0.RetCode;
  __isset = other0.__isset;
}
Rpc_UttInfo& Rpc_UttInfo::operator=(const Rpc_UttInfo& other1) {
  Utt = other1.Utt;
  Duration = other1.Duration;
  ValidDuration = other1.ValidDuration;
  Channels = other1.Channels;
  SampRate = other1.SampRate;
  ErrCode = other1.ErrCode;
  ErrMsg = other1.ErrMsg;
  RetCode = other1.RetCode;
  __isset = other1.__isset;
  return *this;
}
void Rpc_UttInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rpc_UttInfo(";
  out << "Utt=" << to_string(Utt);
  out << ", " << "Duration=" << to_string(Duration);
  out << ", " << "ValidDuration=" << to_string(ValidDuration);
  out << ", " << "Channels=" << to_string(Channels);
  out << ", " << "SampRate=" << to_string(SampRate);
  out << ", " << "ErrCode=" << to_string(ErrCode);
  out << ", " << "ErrMsg=" << to_string(ErrMsg);
  out << ", " << "RetCode=" << to_string(RetCode);
  out << ")";
}


Rpc_ModelInfo::~Rpc_ModelInfo() throw() {
}


void Rpc_ModelInfo::__set_Utt(const std::string& val) {
  this->Utt = val;
}

void Rpc_ModelInfo::__set_Spkid(const std::string& val) {
  this->Spkid = val;
}

void Rpc_ModelInfo::__set_Size(const int32_t val) {
  this->Size = val;
}

void Rpc_ModelInfo::__set_Language(const std::string& val) {
  this->Language = val;
}

void Rpc_ModelInfo::__set_Gender(const std::string& val) {
  this->Gender = val;
}

void Rpc_ModelInfo::__set_Channeltype(const std::string& val) {
  this->Channeltype = val;
}

void Rpc_ModelInfo::__set_SampRate(const int32_t val) {
  this->SampRate = val;
}

void Rpc_ModelInfo::__set_Duration(const int64_t val) {
  this->Duration = val;
}

void Rpc_ModelInfo::__set_ValidDuration(const int64_t val) {
  this->ValidDuration = val;
}

void Rpc_ModelInfo::__set_IvFile(const std::string& val) {
  this->IvFile = val;
}

void Rpc_ModelInfo::__set_ErrCode(const int32_t val) {
  this->ErrCode = val;
}

void Rpc_ModelInfo::__set_ErrMsg(const std::string& val) {
  this->ErrMsg = val;
}

void Rpc_ModelInfo::__set_RetCode(const int32_t val) {
  this->RetCode = val;
}

uint32_t Rpc_ModelInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Utt);
          this->__isset.Utt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Spkid);
          this->__isset.Spkid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Size);
          this->__isset.Size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Language);
          this->__isset.Language = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Gender);
          this->__isset.Gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Channeltype);
          this->__isset.Channeltype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SampRate);
          this->__isset.SampRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Duration);
          this->__isset.Duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ValidDuration);
          this->__isset.ValidDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IvFile);
          this->__isset.IvFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ErrCode);
          this->__isset.ErrCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ErrMsg);
          this->__isset.ErrMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RetCode);
          this->__isset.RetCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rpc_ModelInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rpc_ModelInfo");

  xfer += oprot->writeFieldBegin("Utt", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Utt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Spkid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Spkid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Size", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Language", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Language);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Gender", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Gender);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Channeltype", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Channeltype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SampRate", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->SampRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Duration", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->Duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ValidDuration", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->ValidDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IvFile", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->IvFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrCode", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->ErrCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrMsg", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->ErrMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RetCode", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->RetCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rpc_ModelInfo &a, Rpc_ModelInfo &b) {
  using ::std::swap;
  swap(a.Utt, b.Utt);
  swap(a.Spkid, b.Spkid);
  swap(a.Size, b.Size);
  swap(a.Language, b.Language);
  swap(a.Gender, b.Gender);
  swap(a.Channeltype, b.Channeltype);
  swap(a.SampRate, b.SampRate);
  swap(a.Duration, b.Duration);
  swap(a.ValidDuration, b.ValidDuration);
  swap(a.IvFile, b.IvFile);
  swap(a.ErrCode, b.ErrCode);
  swap(a.ErrMsg, b.ErrMsg);
  swap(a.RetCode, b.RetCode);
  swap(a.__isset, b.__isset);
}

Rpc_ModelInfo::Rpc_ModelInfo(const Rpc_ModelInfo& other2) {
  Utt = other2.Utt;
  Spkid = other2.Spkid;
  Size = other2.Size;
  Language = other2.Language;
  Gender = other2.Gender;
  Channeltype = other2.Channeltype;
  SampRate = other2.SampRate;
  Duration = other2.Duration;
  ValidDuration = other2.ValidDuration;
  IvFile = other2.IvFile;
  ErrCode = other2.ErrCode;
  ErrMsg = other2.ErrMsg;
  RetCode = other2.RetCode;
  __isset = other2.__isset;
}
Rpc_ModelInfo& Rpc_ModelInfo::operator=(const Rpc_ModelInfo& other3) {
  Utt = other3.Utt;
  Spkid = other3.Spkid;
  Size = other3.Size;
  Language = other3.Language;
  Gender = other3.Gender;
  Channeltype = other3.Channeltype;
  SampRate = other3.SampRate;
  Duration = other3.Duration;
  ValidDuration = other3.ValidDuration;
  IvFile = other3.IvFile;
  ErrCode = other3.ErrCode;
  ErrMsg = other3.ErrMsg;
  RetCode = other3.RetCode;
  __isset = other3.__isset;
  return *this;
}
void Rpc_ModelInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rpc_ModelInfo(";
  out << "Utt=" << to_string(Utt);
  out << ", " << "Spkid=" << to_string(Spkid);
  out << ", " << "Size=" << to_string(Size);
  out << ", " << "Language=" << to_string(Language);
  out << ", " << "Gender=" << to_string(Gender);
  out << ", " << "Channeltype=" << to_string(Channeltype);
  out << ", " << "SampRate=" << to_string(SampRate);
  out << ", " << "Duration=" << to_string(Duration);
  out << ", " << "ValidDuration=" << to_string(ValidDuration);
  out << ", " << "IvFile=" << to_string(IvFile);
  out << ", " << "ErrCode=" << to_string(ErrCode);
  out << ", " << "ErrMsg=" << to_string(ErrMsg);
  out << ", " << "RetCode=" << to_string(RetCode);
  out << ")";
}


Rpc_ScoreInfo::~Rpc_ScoreInfo() throw() {
}


void Rpc_ScoreInfo::__set_Utt(const std::string& val) {
  this->Utt = val;
}

void Rpc_ScoreInfo::__set_Spkid(const std::string& val) {
  this->Spkid = val;
}

void Rpc_ScoreInfo::__set_Score(const double val) {
  this->Score = val;
}

void Rpc_ScoreInfo::__set_SampRate(const int32_t val) {
  this->SampRate = val;
}

void Rpc_ScoreInfo::__set_Duration(const int64_t val) {
  this->Duration = val;
}

void Rpc_ScoreInfo::__set_ValidDuration(const int64_t val) {
  this->ValidDuration = val;
}

void Rpc_ScoreInfo::__set_ErrCode(const int32_t val) {
  this->ErrCode = val;
}

void Rpc_ScoreInfo::__set_ErrMsg(const std::string& val) {
  this->ErrMsg = val;
}

void Rpc_ScoreInfo::__set_RetCode(const int32_t val) {
  this->RetCode = val;
}

uint32_t Rpc_ScoreInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Utt);
          this->__isset.Utt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Spkid);
          this->__isset.Spkid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Score);
          this->__isset.Score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SampRate);
          this->__isset.SampRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Duration);
          this->__isset.Duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ValidDuration);
          this->__isset.ValidDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ErrCode);
          this->__isset.ErrCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ErrMsg);
          this->__isset.ErrMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RetCode);
          this->__isset.RetCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rpc_ScoreInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rpc_ScoreInfo");

  xfer += oprot->writeFieldBegin("Utt", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Utt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Spkid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Spkid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Score", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->Score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SampRate", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->SampRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Duration", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->Duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ValidDuration", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->ValidDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrCode", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->ErrCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrMsg", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ErrMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RetCode", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->RetCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rpc_ScoreInfo &a, Rpc_ScoreInfo &b) {
  using ::std::swap;
  swap(a.Utt, b.Utt);
  swap(a.Spkid, b.Spkid);
  swap(a.Score, b.Score);
  swap(a.SampRate, b.SampRate);
  swap(a.Duration, b.Duration);
  swap(a.ValidDuration, b.ValidDuration);
  swap(a.ErrCode, b.ErrCode);
  swap(a.ErrMsg, b.ErrMsg);
  swap(a.RetCode, b.RetCode);
  swap(a.__isset, b.__isset);
}

Rpc_ScoreInfo::Rpc_ScoreInfo(const Rpc_ScoreInfo& other4) {
  Utt = other4.Utt;
  Spkid = other4.Spkid;
  Score = other4.Score;
  SampRate = other4.SampRate;
  Duration = other4.Duration;
  ValidDuration = other4.ValidDuration;
  ErrCode = other4.ErrCode;
  ErrMsg = other4.ErrMsg;
  RetCode = other4.RetCode;
  __isset = other4.__isset;
}
Rpc_ScoreInfo& Rpc_ScoreInfo::operator=(const Rpc_ScoreInfo& other5) {
  Utt = other5.Utt;
  Spkid = other5.Spkid;
  Score = other5.Score;
  SampRate = other5.SampRate;
  Duration = other5.Duration;
  ValidDuration = other5.ValidDuration;
  ErrCode = other5.ErrCode;
  ErrMsg = other5.ErrMsg;
  RetCode = other5.RetCode;
  __isset = other5.__isset;
  return *this;
}
void Rpc_ScoreInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rpc_ScoreInfo(";
  out << "Utt=" << to_string(Utt);
  out << ", " << "Spkid=" << to_string(Spkid);
  out << ", " << "Score=" << to_string(Score);
  out << ", " << "SampRate=" << to_string(SampRate);
  out << ", " << "Duration=" << to_string(Duration);
  out << ", " << "ValidDuration=" << to_string(ValidDuration);
  out << ", " << "ErrCode=" << to_string(ErrCode);
  out << ", " << "ErrMsg=" << to_string(ErrMsg);
  out << ", " << "RetCode=" << to_string(RetCode);
  out << ")";
}


Rpc_SpeakerScore::~Rpc_SpeakerScore() throw() {
}


void Rpc_SpeakerScore::__set_Spkid(const std::string& val) {
  this->Spkid = val;
}

void Rpc_SpeakerScore::__set_Score(const double val) {
  this->Score = val;
}

uint32_t Rpc_SpeakerScore::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Spkid);
          this->__isset.Spkid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->Score);
          this->__isset.Score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rpc_SpeakerScore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rpc_SpeakerScore");

  xfer += oprot->writeFieldBegin("Spkid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Spkid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Score", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->Score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rpc_SpeakerScore &a, Rpc_SpeakerScore &b) {
  using ::std::swap;
  swap(a.Spkid, b.Spkid);
  swap(a.Score, b.Score);
  swap(a.__isset, b.__isset);
}

Rpc_SpeakerScore::Rpc_SpeakerScore(const Rpc_SpeakerScore& other6) {
  Spkid = other6.Spkid;
  Score = other6.Score;
  __isset = other6.__isset;
}
Rpc_SpeakerScore& Rpc_SpeakerScore::operator=(const Rpc_SpeakerScore& other7) {
  Spkid = other7.Spkid;
  Score = other7.Score;
  __isset = other7.__isset;
  return *this;
}
void Rpc_SpeakerScore::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rpc_SpeakerScore(";
  out << "Spkid=" << to_string(Spkid);
  out << ", " << "Score=" << to_string(Score);
  out << ")";
}


Rpc_TopSpeakerInfo::~Rpc_TopSpeakerInfo() throw() {
}


void Rpc_TopSpeakerInfo::__set_Utt(const std::string& val) {
  this->Utt = val;
}

void Rpc_TopSpeakerInfo::__set_Scores(const std::vector<Rpc_SpeakerScore> & val) {
  this->Scores = val;
}

void Rpc_TopSpeakerInfo::__set_Top(const int32_t val) {
  this->Top = val;
}

void Rpc_TopSpeakerInfo::__set_SampRate(const int32_t val) {
  this->SampRate = val;
}

void Rpc_TopSpeakerInfo::__set_Duration(const int64_t val) {
  this->Duration = val;
}

void Rpc_TopSpeakerInfo::__set_ValidDuration(const int64_t val) {
  this->ValidDuration = val;
}

void Rpc_TopSpeakerInfo::__set_ErrCode(const int32_t val) {
  this->ErrCode = val;
}

void Rpc_TopSpeakerInfo::__set_ErrMsg(const std::string& val) {
  this->ErrMsg = val;
}

void Rpc_TopSpeakerInfo::__set_RetCode(const int32_t val) {
  this->RetCode = val;
}

uint32_t Rpc_TopSpeakerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Utt);
          this->__isset.Utt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->Scores.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->Scores.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->Scores[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.Scores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Top);
          this->__isset.Top = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SampRate);
          this->__isset.SampRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Duration);
          this->__isset.Duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ValidDuration);
          this->__isset.ValidDuration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ErrCode);
          this->__isset.ErrCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ErrMsg);
          this->__isset.ErrMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RetCode);
          this->__isset.RetCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rpc_TopSpeakerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rpc_TopSpeakerInfo");

  xfer += oprot->writeFieldBegin("Utt", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Utt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Scores", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->Scores.size()));
    std::vector<Rpc_SpeakerScore> ::const_iterator _iter13;
    for (_iter13 = this->Scores.begin(); _iter13 != this->Scores.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Top", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Top);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SampRate", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->SampRate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Duration", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->Duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ValidDuration", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->ValidDuration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrCode", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->ErrCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ErrMsg", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ErrMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RetCode", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->RetCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rpc_TopSpeakerInfo &a, Rpc_TopSpeakerInfo &b) {
  using ::std::swap;
  swap(a.Utt, b.Utt);
  swap(a.Scores, b.Scores);
  swap(a.Top, b.Top);
  swap(a.SampRate, b.SampRate);
  swap(a.Duration, b.Duration);
  swap(a.ValidDuration, b.ValidDuration);
  swap(a.ErrCode, b.ErrCode);
  swap(a.ErrMsg, b.ErrMsg);
  swap(a.RetCode, b.RetCode);
  swap(a.__isset, b.__isset);
}

Rpc_TopSpeakerInfo::Rpc_TopSpeakerInfo(const Rpc_TopSpeakerInfo& other14) {
  Utt = other14.Utt;
  Scores = other14.Scores;
  Top = other14.Top;
  SampRate = other14.SampRate;
  Duration = other14.Duration;
  ValidDuration = other14.ValidDuration;
  ErrCode = other14.ErrCode;
  ErrMsg = other14.ErrMsg;
  RetCode = other14.RetCode;
  __isset = other14.__isset;
}
Rpc_TopSpeakerInfo& Rpc_TopSpeakerInfo::operator=(const Rpc_TopSpeakerInfo& other15) {
  Utt = other15.Utt;
  Scores = other15.Scores;
  Top = other15.Top;
  SampRate = other15.SampRate;
  Duration = other15.Duration;
  ValidDuration = other15.ValidDuration;
  ErrCode = other15.ErrCode;
  ErrMsg = other15.ErrMsg;
  RetCode = other15.RetCode;
  __isset = other15.__isset;
  return *this;
}
void Rpc_TopSpeakerInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rpc_TopSpeakerInfo(";
  out << "Utt=" << to_string(Utt);
  out << ", " << "Scores=" << to_string(Scores);
  out << ", " << "Top=" << to_string(Top);
  out << ", " << "SampRate=" << to_string(SampRate);
  out << ", " << "Duration=" << to_string(Duration);
  out << ", " << "ValidDuration=" << to_string(ValidDuration);
  out << ", " << "ErrCode=" << to_string(ErrCode);
  out << ", " << "ErrMsg=" << to_string(ErrMsg);
  out << ", " << "RetCode=" << to_string(RetCode);
  out << ")";
}


Rpc_LicenceInfo::~Rpc_LicenceInfo() throw() {
}


void Rpc_LicenceInfo::__set_dateStr(const std::string& val) {
  this->dateStr = val;
}

void Rpc_LicenceInfo::__set_maxOccurs(const int32_t val) {
  this->maxOccurs = val;
}

void Rpc_LicenceInfo::__set_fingerprint(const std::string& val) {
  this->fingerprint = val;
}

void Rpc_LicenceInfo::__set_RetCode(const int32_t val) {
  this->RetCode = val;
}

uint32_t Rpc_LicenceInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateStr);
          this->__isset.dateStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxOccurs);
          this->__isset.maxOccurs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fingerprint);
          this->__isset.fingerprint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->RetCode);
          this->__isset.RetCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rpc_LicenceInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rpc_LicenceInfo");

  xfer += oprot->writeFieldBegin("dateStr", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dateStr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxOccurs", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->maxOccurs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fingerprint", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->fingerprint);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("RetCode", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->RetCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rpc_LicenceInfo &a, Rpc_LicenceInfo &b) {
  using ::std::swap;
  swap(a.dateStr, b.dateStr);
  swap(a.maxOccurs, b.maxOccurs);
  swap(a.fingerprint, b.fingerprint);
  swap(a.RetCode, b.RetCode);
  swap(a.__isset, b.__isset);
}

Rpc_LicenceInfo::Rpc_LicenceInfo(const Rpc_LicenceInfo& other16) {
  dateStr = other16.dateStr;
  maxOccurs = other16.maxOccurs;
  fingerprint = other16.fingerprint;
  RetCode = other16.RetCode;
  __isset = other16.__isset;
}
Rpc_LicenceInfo& Rpc_LicenceInfo::operator=(const Rpc_LicenceInfo& other17) {
  dateStr = other17.dateStr;
  maxOccurs = other17.maxOccurs;
  fingerprint = other17.fingerprint;
  RetCode = other17.RetCode;
  __isset = other17.__isset;
  return *this;
}
void Rpc_LicenceInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rpc_LicenceInfo(";
  out << "dateStr=" << to_string(dateStr);
  out << ", " << "maxOccurs=" << to_string(maxOccurs);
  out << ", " << "fingerprint=" << to_string(fingerprint);
  out << ", " << "RetCode=" << to_string(RetCode);
  out << ")";
}


