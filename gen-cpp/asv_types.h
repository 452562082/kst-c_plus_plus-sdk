/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef asv_TYPES_H
#define asv_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Rpc_UttInfo;

class Rpc_ModelInfo;

class Rpc_ScoreInfo;

class Rpc_SpeakerScore;

class Rpc_TopSpeakerInfo;

class Rpc_LicenceInfo;

typedef struct _Rpc_UttInfo__isset {
  _Rpc_UttInfo__isset() : Utt(false), Duration(false), ValidDuration(false), Channels(false), SampRate(false), ErrCode(false), ErrMsg(false), RetCode(false) {}
  bool Utt :1;
  bool Duration :1;
  bool ValidDuration :1;
  bool Channels :1;
  bool SampRate :1;
  bool ErrCode :1;
  bool ErrMsg :1;
  bool RetCode :1;
} _Rpc_UttInfo__isset;

class Rpc_UttInfo : public virtual ::apache::thrift::TBase {
 public:

  Rpc_UttInfo(const Rpc_UttInfo&);
  Rpc_UttInfo& operator=(const Rpc_UttInfo&);
  Rpc_UttInfo() : Utt(), Duration(0), ValidDuration(0), Channels(0), SampRate(0), ErrCode(0), ErrMsg(), RetCode(0) {
  }

  virtual ~Rpc_UttInfo() throw();
  std::string Utt;
  int64_t Duration;
  int64_t ValidDuration;
  int32_t Channels;
  int32_t SampRate;
  int32_t ErrCode;
  std::string ErrMsg;
  int32_t RetCode;

  _Rpc_UttInfo__isset __isset;

  void __set_Utt(const std::string& val);

  void __set_Duration(const int64_t val);

  void __set_ValidDuration(const int64_t val);

  void __set_Channels(const int32_t val);

  void __set_SampRate(const int32_t val);

  void __set_ErrCode(const int32_t val);

  void __set_ErrMsg(const std::string& val);

  void __set_RetCode(const int32_t val);

  bool operator == (const Rpc_UttInfo & rhs) const
  {
    if (!(Utt == rhs.Utt))
      return false;
    if (!(Duration == rhs.Duration))
      return false;
    if (!(ValidDuration == rhs.ValidDuration))
      return false;
    if (!(Channels == rhs.Channels))
      return false;
    if (!(SampRate == rhs.SampRate))
      return false;
    if (!(ErrCode == rhs.ErrCode))
      return false;
    if (!(ErrMsg == rhs.ErrMsg))
      return false;
    if (!(RetCode == rhs.RetCode))
      return false;
    return true;
  }
  bool operator != (const Rpc_UttInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rpc_UttInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rpc_UttInfo &a, Rpc_UttInfo &b);

inline std::ostream& operator<<(std::ostream& out, const Rpc_UttInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Rpc_ModelInfo__isset {
  _Rpc_ModelInfo__isset() : Utt(false), Spkid(false), Size(false), Language(false), Gender(false), Channeltype(false), SampRate(false), Duration(false), ValidDuration(false), IvFile(false), ErrCode(false), ErrMsg(false), RetCode(false) {}
  bool Utt :1;
  bool Spkid :1;
  bool Size :1;
  bool Language :1;
  bool Gender :1;
  bool Channeltype :1;
  bool SampRate :1;
  bool Duration :1;
  bool ValidDuration :1;
  bool IvFile :1;
  bool ErrCode :1;
  bool ErrMsg :1;
  bool RetCode :1;
} _Rpc_ModelInfo__isset;

class Rpc_ModelInfo : public virtual ::apache::thrift::TBase {
 public:

  Rpc_ModelInfo(const Rpc_ModelInfo&);
  Rpc_ModelInfo& operator=(const Rpc_ModelInfo&);
  Rpc_ModelInfo() : Utt(), Spkid(), Size(0), Language(), Gender(), Channeltype(), SampRate(0), Duration(0), ValidDuration(0), IvFile(), ErrCode(0), ErrMsg(), RetCode(0) {
  }

  virtual ~Rpc_ModelInfo() throw();
  std::string Utt;
  std::string Spkid;
  int32_t Size;
  std::string Language;
  std::string Gender;
  std::string Channeltype;
  int32_t SampRate;
  int64_t Duration;
  int64_t ValidDuration;
  std::string IvFile;
  int32_t ErrCode;
  std::string ErrMsg;
  int32_t RetCode;

  _Rpc_ModelInfo__isset __isset;

  void __set_Utt(const std::string& val);

  void __set_Spkid(const std::string& val);

  void __set_Size(const int32_t val);

  void __set_Language(const std::string& val);

  void __set_Gender(const std::string& val);

  void __set_Channeltype(const std::string& val);

  void __set_SampRate(const int32_t val);

  void __set_Duration(const int64_t val);

  void __set_ValidDuration(const int64_t val);

  void __set_IvFile(const std::string& val);

  void __set_ErrCode(const int32_t val);

  void __set_ErrMsg(const std::string& val);

  void __set_RetCode(const int32_t val);

  bool operator == (const Rpc_ModelInfo & rhs) const
  {
    if (!(Utt == rhs.Utt))
      return false;
    if (!(Spkid == rhs.Spkid))
      return false;
    if (!(Size == rhs.Size))
      return false;
    if (!(Language == rhs.Language))
      return false;
    if (!(Gender == rhs.Gender))
      return false;
    if (!(Channeltype == rhs.Channeltype))
      return false;
    if (!(SampRate == rhs.SampRate))
      return false;
    if (!(Duration == rhs.Duration))
      return false;
    if (!(ValidDuration == rhs.ValidDuration))
      return false;
    if (!(IvFile == rhs.IvFile))
      return false;
    if (!(ErrCode == rhs.ErrCode))
      return false;
    if (!(ErrMsg == rhs.ErrMsg))
      return false;
    if (!(RetCode == rhs.RetCode))
      return false;
    return true;
  }
  bool operator != (const Rpc_ModelInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rpc_ModelInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rpc_ModelInfo &a, Rpc_ModelInfo &b);

inline std::ostream& operator<<(std::ostream& out, const Rpc_ModelInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Rpc_ScoreInfo__isset {
  _Rpc_ScoreInfo__isset() : Utt(false), Spkid(false), Score(false), SampRate(false), Duration(false), ValidDuration(false), ErrCode(false), ErrMsg(false), RetCode(false) {}
  bool Utt :1;
  bool Spkid :1;
  bool Score :1;
  bool SampRate :1;
  bool Duration :1;
  bool ValidDuration :1;
  bool ErrCode :1;
  bool ErrMsg :1;
  bool RetCode :1;
} _Rpc_ScoreInfo__isset;

class Rpc_ScoreInfo : public virtual ::apache::thrift::TBase {
 public:

  Rpc_ScoreInfo(const Rpc_ScoreInfo&);
  Rpc_ScoreInfo& operator=(const Rpc_ScoreInfo&);
  Rpc_ScoreInfo() : Utt(), Spkid(), Score(0), SampRate(0), Duration(0), ValidDuration(0), ErrCode(0), ErrMsg(), RetCode(0) {
  }

  virtual ~Rpc_ScoreInfo() throw();
  std::string Utt;
  std::string Spkid;
  double Score;
  int32_t SampRate;
  int64_t Duration;
  int64_t ValidDuration;
  int32_t ErrCode;
  std::string ErrMsg;
  int32_t RetCode;

  _Rpc_ScoreInfo__isset __isset;

  void __set_Utt(const std::string& val);

  void __set_Spkid(const std::string& val);

  void __set_Score(const double val);

  void __set_SampRate(const int32_t val);

  void __set_Duration(const int64_t val);

  void __set_ValidDuration(const int64_t val);

  void __set_ErrCode(const int32_t val);

  void __set_ErrMsg(const std::string& val);

  void __set_RetCode(const int32_t val);

  bool operator == (const Rpc_ScoreInfo & rhs) const
  {
    if (!(Utt == rhs.Utt))
      return false;
    if (!(Spkid == rhs.Spkid))
      return false;
    if (!(Score == rhs.Score))
      return false;
    if (!(SampRate == rhs.SampRate))
      return false;
    if (!(Duration == rhs.Duration))
      return false;
    if (!(ValidDuration == rhs.ValidDuration))
      return false;
    if (!(ErrCode == rhs.ErrCode))
      return false;
    if (!(ErrMsg == rhs.ErrMsg))
      return false;
    if (!(RetCode == rhs.RetCode))
      return false;
    return true;
  }
  bool operator != (const Rpc_ScoreInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rpc_ScoreInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rpc_ScoreInfo &a, Rpc_ScoreInfo &b);

inline std::ostream& operator<<(std::ostream& out, const Rpc_ScoreInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Rpc_SpeakerScore__isset {
  _Rpc_SpeakerScore__isset() : Spkid(false), Score(false), Node(false) {}
  bool Spkid :1;
  bool Score :1;
  bool Node :1;
} _Rpc_SpeakerScore__isset;

class Rpc_SpeakerScore : public virtual ::apache::thrift::TBase {
 public:

  Rpc_SpeakerScore(const Rpc_SpeakerScore&);
  Rpc_SpeakerScore& operator=(const Rpc_SpeakerScore&);
  Rpc_SpeakerScore() : Spkid(), Score(0), Node() {
  }

  virtual ~Rpc_SpeakerScore() throw();
  std::string Spkid;
  double Score;
  std::string Node;

  _Rpc_SpeakerScore__isset __isset;

  void __set_Spkid(const std::string& val);

  void __set_Score(const double val);

  void __set_Node(const std::string& val);

  bool operator == (const Rpc_SpeakerScore & rhs) const
  {
    if (!(Spkid == rhs.Spkid))
      return false;
    if (!(Score == rhs.Score))
      return false;
    if (!(Node == rhs.Node))
      return false;
    return true;
  }
  bool operator != (const Rpc_SpeakerScore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rpc_SpeakerScore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rpc_SpeakerScore &a, Rpc_SpeakerScore &b);

inline std::ostream& operator<<(std::ostream& out, const Rpc_SpeakerScore& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Rpc_TopSpeakerInfo__isset {
  _Rpc_TopSpeakerInfo__isset() : Utt(false), Scores(false), Top(false), SampRate(false), Duration(false), ValidDuration(false), ErrCode(false), ErrMsg(false), RetCode(false) {}
  bool Utt :1;
  bool Scores :1;
  bool Top :1;
  bool SampRate :1;
  bool Duration :1;
  bool ValidDuration :1;
  bool ErrCode :1;
  bool ErrMsg :1;
  bool RetCode :1;
} _Rpc_TopSpeakerInfo__isset;

class Rpc_TopSpeakerInfo : public virtual ::apache::thrift::TBase {
 public:

  Rpc_TopSpeakerInfo(const Rpc_TopSpeakerInfo&);
  Rpc_TopSpeakerInfo& operator=(const Rpc_TopSpeakerInfo&);
  Rpc_TopSpeakerInfo() : Utt(), Top(0), SampRate(0), Duration(0), ValidDuration(0), ErrCode(0), ErrMsg(), RetCode(0) {
  }

  virtual ~Rpc_TopSpeakerInfo() throw();
  std::string Utt;
  std::vector<Rpc_SpeakerScore>  Scores;
  int32_t Top;
  int32_t SampRate;
  int64_t Duration;
  int64_t ValidDuration;
  int32_t ErrCode;
  std::string ErrMsg;
  int32_t RetCode;

  _Rpc_TopSpeakerInfo__isset __isset;

  void __set_Utt(const std::string& val);

  void __set_Scores(const std::vector<Rpc_SpeakerScore> & val);

  void __set_Top(const int32_t val);

  void __set_SampRate(const int32_t val);

  void __set_Duration(const int64_t val);

  void __set_ValidDuration(const int64_t val);

  void __set_ErrCode(const int32_t val);

  void __set_ErrMsg(const std::string& val);

  void __set_RetCode(const int32_t val);

  bool operator == (const Rpc_TopSpeakerInfo & rhs) const
  {
    if (!(Utt == rhs.Utt))
      return false;
    if (!(Scores == rhs.Scores))
      return false;
    if (!(Top == rhs.Top))
      return false;
    if (!(SampRate == rhs.SampRate))
      return false;
    if (!(Duration == rhs.Duration))
      return false;
    if (!(ValidDuration == rhs.ValidDuration))
      return false;
    if (!(ErrCode == rhs.ErrCode))
      return false;
    if (!(ErrMsg == rhs.ErrMsg))
      return false;
    if (!(RetCode == rhs.RetCode))
      return false;
    return true;
  }
  bool operator != (const Rpc_TopSpeakerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rpc_TopSpeakerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rpc_TopSpeakerInfo &a, Rpc_TopSpeakerInfo &b);

inline std::ostream& operator<<(std::ostream& out, const Rpc_TopSpeakerInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Rpc_LicenceInfo__isset {
  _Rpc_LicenceInfo__isset() : dateStr(false), maxOccurs(false), fingerprint(false), RetCode(false) {}
  bool dateStr :1;
  bool maxOccurs :1;
  bool fingerprint :1;
  bool RetCode :1;
} _Rpc_LicenceInfo__isset;

class Rpc_LicenceInfo : public virtual ::apache::thrift::TBase {
 public:

  Rpc_LicenceInfo(const Rpc_LicenceInfo&);
  Rpc_LicenceInfo& operator=(const Rpc_LicenceInfo&);
  Rpc_LicenceInfo() : dateStr(), maxOccurs(0), fingerprint(), RetCode(0) {
  }

  virtual ~Rpc_LicenceInfo() throw();
  std::string dateStr;
  int32_t maxOccurs;
  std::string fingerprint;
  int32_t RetCode;

  _Rpc_LicenceInfo__isset __isset;

  void __set_dateStr(const std::string& val);

  void __set_maxOccurs(const int32_t val);

  void __set_fingerprint(const std::string& val);

  void __set_RetCode(const int32_t val);

  bool operator == (const Rpc_LicenceInfo & rhs) const
  {
    if (!(dateStr == rhs.dateStr))
      return false;
    if (!(maxOccurs == rhs.maxOccurs))
      return false;
    if (!(fingerprint == rhs.fingerprint))
      return false;
    if (!(RetCode == rhs.RetCode))
      return false;
    return true;
  }
  bool operator != (const Rpc_LicenceInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rpc_LicenceInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rpc_LicenceInfo &a, Rpc_LicenceInfo &b);

inline std::ostream& operator<<(std::ostream& out, const Rpc_LicenceInfo& obj)
{
  obj.printTo(out);
  return out;
}



#endif
